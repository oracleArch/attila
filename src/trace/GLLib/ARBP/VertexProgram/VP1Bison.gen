/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         vp1parse
#define yylex           vp1lex
#define yyerror         vp1error
#define yydebug         vp1debug
#define yynerrs         vp1nerrs

#define yylval          vp1lval
#define yychar          vp1char

/* Copy the first part of user declarations.  */
#line 14 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:339  */

#include <iostream>
#include <string>
#include <sstream>

using namespace std;

int yylex();

#include "IRNode.h"

using namespace libgl::GenerationCode;
using namespace libgl;

#define APPEND_STR(str,str1)                       { (str).append(str1); }
#define APPEND_NUMBER_SELECTION(string,number)     { stringstream ss; ss << "[" << number << "]"; (string).append(ss.str()); }
#define APPEND_ROW_RANGE_SELECTION(string,min,max) { stringstream ss; ss << "[" << min << ".." << max << "]"; (string).append(ss.str()); }
#define STRING_TO_VAR(str, var)                    { stringstream ss(str, ios::in); ss >> var; }

#define CREATE_STRING(str_ptr,TEXT)                { (str_ptr) = new string(TEXT); vp1ASTStringCollector.push_back(str_ptr); }

#define CREATE_EMPTY_STRING(str_ptr)               CREATE_STRING(str_ptr, "")


void yyerror(void* irtree, char *s)
{
    panic("VP1Grammar.y","yyerror()","Sintactic error in Vertex Program");
}

typedef struct{
  string* texto;
  int linea;
} type_token_atrib;  

list<string*> vp1LexSymbolCollector;

list<string*> vp1ASTStringCollector;


#line 114 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif


/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int vp1debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    TOK_ARBVP10_HEADER = 258,
    TOK_END = 259,
    TOK_OPTION = 260,
    TOK_ARL = 261,
    TOK_ABS = 262,
    TOK_ADD = 263,
    TOK_DP3 = 264,
    TOK_DP4 = 265,
    TOK_DPH = 266,
    TOK_DST = 267,
    TOK_EX2 = 268,
    TOK_EXP = 269,
    TOK_FLR = 270,
    TOK_FRC = 271,
    TOK_LG2 = 272,
    TOK_LIT = 273,
    TOK_LOG = 274,
    TOK_MAD = 275,
    TOK_MAX = 276,
    TOK_MIN = 277,
    TOK_MOV = 278,
    TOK_MUL = 279,
    TOK_POW = 280,
    TOK_RCP = 281,
    TOK_RSQ = 282,
    TOK_SGE = 283,
    TOK_SLT = 284,
    TOK_SUB = 285,
    TOK_SWZ = 286,
    TOK_XPD = 287,
    TOK_PARAM = 288,
    TOK_ATTRIB = 289,
    TOK_TEMP = 290,
    TOK_ADDRESS = 291,
    TOK_OUTPUT = 292,
    TOK_ALIAS = 293,
    TOK_VERTEX = 294,
    TOK_PROGRAM = 295,
    TOK_STATE = 296,
    TOK_RESULT = 297,
    TOK_INT_CONST = 298,
    TOK_FLOAT_CONST = 299,
    TOK_IDENT = 300,
    TOK_COMPONENT = 301,
    TOK_ROW = 302,
    TOK_POSITION = 303,
    TOK_NORMAL = 304,
    TOK_FOGCOORD = 305,
    TOK_WEIGHT = 306,
    TOK_COLOR = 307,
    TOK_TEXCOORD = 308,
    TOK_MATRIXINDEX = 309,
    TOK_ATTRIB_M = 310,
    TOK_MATERIAL = 311,
    TOK_AMBIENT = 312,
    TOK_DIFFUSE = 313,
    TOK_SPECULAR = 314,
    TOK_EMISSION = 315,
    TOK_SHININESS = 316,
    TOK_LIGHT = 317,
    TOK_SPOT = 318,
    TOK_HALF = 319,
    TOK_DIRECTION = 320,
    TOK_LIGHTMODEL = 321,
    TOK_SCENECOLOR = 322,
    TOK_LIGHTPROD = 323,
    TOK_TEXGEN = 324,
    TOK_EYE = 325,
    TOK_OBJECT = 326,
    TOK_S_COORD = 327,
    TOK_T_COORD = 328,
    TOK_R_COORD = 329,
    TOK_Q_COORD = 330,
    TOK_FOG = 331,
    TOK_PARAMS = 332,
    TOK_CLIP = 333,
    TOK_PLANE = 334,
    TOK_POINT_C = 335,
    TOK_SIZE_C = 336,
    TOK_ATTENUATION = 337,
    TOK_MATRIX = 338,
    TOK_INVERSE = 339,
    TOK_TRANSPOSE = 340,
    TOK_INVTRANS = 341,
    TOK_MODELVIEW = 342,
    TOK_PROJECTION = 343,
    TOK_MVP = 344,
    TOK_TEXTURE = 345,
    TOK_PALETTE = 346,
    TOK_FRONT = 347,
    TOK_BACK = 348,
    TOK_PRIMARY = 349,
    TOK_SECONDARY = 350,
    TOK_POINTSIZE = 351,
    TOK_POINT_POINT = 352,
    TOK_ENV = 353,
    TOK_LOCAL = 354
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 53 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:355  */
         
  type_token_atrib                          token_atrib;
  string*                                   str;
  float                                     floatconst;
  int                                       intconst;
  bool                                      boolean;
  list<string>*                             strlist;
  list<IROption*>*                          optlist;
  list<IRStatement*>*                       stmntlist;
  list<IRParamBinding*>*                    pbindlist;
  IRNode*                                   irnode;
  IRProgram*                                irprogram;
  IROption*                                 iroption;
  IRStatement*                              irstatement;
  IRInstruction*                            irinstruction;
  IRSampleInstruction*                      irsamplinstr;
  IRSwizzleInstruction*                     irswzinstr;
  IRSwizzleComponents*                      irswzcomps;
  IRSwizzleComponents::swzComponent         irswzcomp;
  IRDstOperand*                             irdstoperand;
  IRSrcOperand*                             irsrcoperand;
  IRALIASStatement*                         iraliasstmnt;
  IRTEMPStatement*                          irtempstmnt;
  IRADDRESSStatement*                       iraddrstmnt;
  IRATTRIBStatement*                        irattrstmnt;
  IROUTPUTStatement*                        iroutputstmnt;
  IRPARAMStatement*                         irparamstmnt;
  IRParamBinding*                           irparambind;
  IRArrayAddressing*                        irarrayaddr;
  IRLocalEnvBinding*                        irlocalenvbind;

#line 283 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE vp1lval;

int vp1parse (void* irtree);



/* Copy the second part of user declarations.  */

#line 300 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   407

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  110
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  131
/* YYNRULES -- Number of rules.  */
#define YYNRULES  253
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  416

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   354

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   104,   101,   105,   109,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   100,
       2,   106,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   102,     2,   103,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   107,     2,   108,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   163,   163,   168,   174,   180,   184,   189,   195,   199,
     203,   213,   217,   222,   226,   230,   234,   238,   243,   252,
     261,   265,   269,   273,   277,   282,   291,   295,   299,   303,
     307,   311,   316,   327,   332,   343,   347,   351,   355,   359,
     363,   367,   371,   375,   379,   383,   387,   392,   406,   411,
     427,   434,   441,   447,   453,   465,   470,   475,   480,   484,
     491,   496,   503,   508,   513,   519,   524,   528,   533,   538,
     545,   548,   552,   558,   563,   568,   573,   578,   583,   588,
     594,   598,   603,   618,   622,   627,   659,   663,   667,   671,
     675,   679,   684,   690,   695,   700,   707,   712,   719,   724,
     731,   738,   746,   751,   756,   761,   767,   771,   776,   783,
     792,   795,   802,   808,   813,   818,   824,   828,   832,   837,
     842,   847,   853,   857,   861,   866,   870,   875,   879,   883,
     887,   891,   895,   899,   903,   907,   912,   921,   926,   931,
     936,   941,   947,   956,   961,   966,   971,   977,   983,   990,
     996,  1002,  1010,  1015,  1023,  1034,  1039,  1044,  1050,  1055,
    1065,  1070,  1077,  1082,  1087,  1092,  1098,  1106,  1111,  1117,
    1126,  1131,  1139,  1144,  1150,  1159,  1168,  1172,  1180,  1190,
    1194,  1199,  1204,  1209,  1215,  1220,  1227,  1232,  1237,  1244,
    1251,  1260,  1263,  1268,  1273,  1278,  1283,  1287,  1292,  1296,
    1301,  1307,  1312,  1318,  1325,  1331,  1336,  1342,  1349,  1354,
    1359,  1363,  1368,  1372,  1377,  1382,  1387,  1391,  1396,  1402,
    1410,  1417,  1420,  1424,  1429,  1435,  1442,  1445,  1452,  1455,
    1461,  1468,  1473,  1477,  1482,  1487,  1495,  1505,  1509,  1514,
    1521,  1525,  1530,  1537,  1540,  1545,  1550,  1557,  1562,  1567,
    1573,  1579,  1584,  1588
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "TOK_ARBVP10_HEADER", "TOK_END",
  "TOK_OPTION", "TOK_ARL", "TOK_ABS", "TOK_ADD", "TOK_DP3", "TOK_DP4",
  "TOK_DPH", "TOK_DST", "TOK_EX2", "TOK_EXP", "TOK_FLR", "TOK_FRC",
  "TOK_LG2", "TOK_LIT", "TOK_LOG", "TOK_MAD", "TOK_MAX", "TOK_MIN",
  "TOK_MOV", "TOK_MUL", "TOK_POW", "TOK_RCP", "TOK_RSQ", "TOK_SGE",
  "TOK_SLT", "TOK_SUB", "TOK_SWZ", "TOK_XPD", "TOK_PARAM", "TOK_ATTRIB",
  "TOK_TEMP", "TOK_ADDRESS", "TOK_OUTPUT", "TOK_ALIAS", "TOK_VERTEX",
  "TOK_PROGRAM", "TOK_STATE", "TOK_RESULT", "TOK_INT_CONST",
  "TOK_FLOAT_CONST", "TOK_IDENT", "TOK_COMPONENT", "TOK_ROW",
  "TOK_POSITION", "TOK_NORMAL", "TOK_FOGCOORD", "TOK_WEIGHT", "TOK_COLOR",
  "TOK_TEXCOORD", "TOK_MATRIXINDEX", "TOK_ATTRIB_M", "TOK_MATERIAL",
  "TOK_AMBIENT", "TOK_DIFFUSE", "TOK_SPECULAR", "TOK_EMISSION",
  "TOK_SHININESS", "TOK_LIGHT", "TOK_SPOT", "TOK_HALF", "TOK_DIRECTION",
  "TOK_LIGHTMODEL", "TOK_SCENECOLOR", "TOK_LIGHTPROD", "TOK_TEXGEN",
  "TOK_EYE", "TOK_OBJECT", "TOK_S_COORD", "TOK_T_COORD", "TOK_R_COORD",
  "TOK_Q_COORD", "TOK_FOG", "TOK_PARAMS", "TOK_CLIP", "TOK_PLANE",
  "TOK_POINT_C", "TOK_SIZE_C", "TOK_ATTENUATION", "TOK_MATRIX",
  "TOK_INVERSE", "TOK_TRANSPOSE", "TOK_INVTRANS", "TOK_MODELVIEW",
  "TOK_PROJECTION", "TOK_MVP", "TOK_TEXTURE", "TOK_PALETTE", "TOK_FRONT",
  "TOK_BACK", "TOK_PRIMARY", "TOK_SECONDARY", "TOK_POINTSIZE",
  "TOK_POINT_POINT", "TOK_ENV", "TOK_LOCAL", "';'", "','", "'['", "']'",
  "'+'", "'-'", "'='", "'{'", "'}'", "'.'", "$accept", "program",
  "ARBVP10_program", "optionSequence", "option", "statementSequence",
  "statement", "instruction", "ARL_instruction", "VECTORop_instruction",
  "VECTORop", "SCALARop_instruction", "SCALARop", "BINSCop_instruction",
  "BINSCop", "BINop_instruction", "BINop", "TRIop_instruction", "TRIop",
  "SWZ_instruction", "scalarSrcReg", "swizzleSrcReg", "maskedDstReg",
  "maskedAddrReg", "extendedSwizzle", "ExtSwizSel", "srcReg", "dstReg",
  "vertexAttribReg", "progParamReg", "progParamArray", "progParamArrayMem",
  "progParamArrayAbs", "progParamArrayRel", "addrRegRelOffset",
  "addrRegPosOffset", "addrRegNegOffset", "vertexResultReg", "addrReg",
  "addrComponent", "addrWriteMask", "scalarSuffix", "swizzleSuffix",
  "xyzw_rgbaComponent", "optionalMask", "xyzw_rgbaMask", "namingStatement",
  "ATTRIB_statement", "vtxAttribBinding", "vtxAttribItem", "vtxAttribNum",
  "vtxOptWeightNum", "vtxWeightNum", "PARAM_statement", "PARAM_singleStmt",
  "PARAM_multipleStmt", "optArraySize", "paramSingleInit",
  "paramMultipleInit", "paramMultInitList", "paramSingleItemDecl",
  "paramSingleItemUse", "paramMultipleItem", "stateMultipleItem",
  "stateSingleItem", "stateMaterialItem", "stateMatProperty",
  "stateLightItem", "stateLightProperty", "stateSpotProperty",
  "stateLightModelItem", "stateLModProperty", "stateLightProdItem",
  "stateLProdProperty", "stateLightNumber", "stateTexGenItem",
  "stateTexGenType", "stateTexGenCoord", "stateFogItem",
  "stateFogProperty", "stateClipPlaneItem", "stateClipPlaneNum",
  "statePointItem", "statePointProperty", "stateMatrixRow",
  "stateMatrixRows", "optMatrixRows", "stateMatrixItem",
  "stateOptMatModifier", "stateMatModifier", "stateMatrixRowNum",
  "stateMatrixName", "stateOptModMatNum", "stateModMatNum",
  "statePaletteMatNum", "stateProgramMatNum", "programSingleItem",
  "programMultipleItem", "progEnvParams", "progEnvParamNums",
  "progEnvParam", "progLocalParams", "progLocalParamNums",
  "progLocalParam", "progEnvParamNum", "progLocalParamNum",
  "paramConstDecl", "paramConstUse", "paramConstScalarDecl",
  "paramConstScalarUse", "paramConstVector", "signedFloatConstant",
  "optionalSign", "TEMP_statement", "ADDRESS_statement", "varTempNameList",
  "varAddrNameList", "OUTPUT_statement", "resultBinding",
  "resultColBinding", "optFaceType", "optColorType", "optTexCoordNum",
  "texCoordNum", "ALIAS_statement", "establishName", "establishedName",
  "identifier", "component", "integer", "floatConstant", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
      59,    44,    91,    93,    43,    45,    61,   123,   125,    46
};
# endif

#define YYPACT_NINF -347

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-347)))

#define YYTABLE_NINF -66

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      48,  -347,    53,  -347,    81,  -347,    47,  -347,   154,  -347,
      10,  -347,    47,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,    35,  -347,    47,
      47,    47,    47,    47,    47,  -347,    21,  -347,  -347,    35,
    -347,    35,  -347,    35,  -347,    35,  -347,    35,  -347,    44,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,    -4,
     100,  -347,  -347,     2,    54,   100,  -347,  -347,  -347,    16,
    -347,    87,  -347,  -347,    90,    95,  -347,   102,   104,   139,
     145,   148,  -347,    31,  -347,  -347,  -347,  -347,  -347,   106,
     150,  -347,  -347,     1,  -347,  -347,  -347,   105,   -29,  -347,
     212,   152,   153,   214,    47,    31,    31,    31,    31,    31,
    -347,  -347,  -347,     1,  -347,  -347,   117,   105,  -347,   174,
     119,   179,  -347,  -347,    31,   159,  -347,  -347,   156,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,   161,  -347,
    -347,   158,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
     176,  -347,    47,    47,  -347,  -347,  -347,     1,  -347,   164,
     165,   166,   100,  -347,  -347,  -347,   169,  -347,  -347,  -347,
    -347,   -12,   117,   150,   167,   171,  -347,   172,   173,   106,
     175,    -9,   177,   150,    -3,   178,   149,   -21,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,   221,     8,    31,
      46,   170,  -347,  -347,  -347,   100,    31,    31,    31,  -347,
    -347,  -347,   105,  -347,  -347,  -347,  -347,   105,   105,   105,
     105,    42,   105,  -347,  -347,   211,   105,   163,  -347,  -347,
    -347,   105,  -347,  -347,  -347,   180,  -347,  -347,   150,   181,
     241,   124,   182,    31,  -347,  -347,    46,   183,  -347,  -347,
     100,  -347,   184,  -347,  -347,  -347,  -347,  -347,   186,   185,
    -347,   189,   190,  -347,   191,  -347,   192,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,   193,  -347,  -347,   194,  -347,  -347,
      79,   195,  -347,   105,  -347,  -347,   105,   197,  -347,  -347,
    -347,  -347,  -347,   105,    11,   200,  -347,  -347,  -347,  -347,
     132,  -347,   -11,    31,  -347,  -347,  -347,  -347,  -347,    -1,
     106,  -347,  -347,  -347,  -347,  -347,   206,   202,  -347,   204,
    -347,   105,   205,  -347,    31,  -347,    31,   105,   105,  -347,
     144,   179,    12,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,   238,  -347,  -347,  -347,   157,
    -347,  -347,  -347,   207,  -347,  -347,    26,    46,  -347,  -347,
    -347,  -347,   210,   213,  -347,   262,   -11,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,    31,  -347,   215,   105,   105,
     216,  -347,  -347,   209,    31,   217,   224,   219,   226,   105,
    -347,    46,  -347,   105,  -347,   105,   -32,   223,  -347,  -347,
     105,    31,   222,    46,  -347,  -347
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     5,     0,     2,     8,     1,     0,     4,     0,   249,
       0,     3,     0,    20,    35,    36,    37,    38,    39,    26,
      27,    21,    22,    28,    23,    29,    48,    40,    41,    24,
      42,    33,    30,    31,    43,    44,    45,     0,    46,     0,
       0,     0,     0,     0,     0,     7,     0,    11,    12,     0,
      13,     0,    14,     0,    15,     0,    16,     0,    17,     0,
      86,    87,   106,   107,    88,    89,    90,    91,     6,     0,
       0,    76,   248,     0,     0,    83,    60,    75,    61,     0,
     247,     0,   226,   228,     0,     0,     9,     0,     0,     0,
       0,     0,    10,   221,   250,    53,    78,   231,   233,   237,
     243,   234,   232,     0,    52,    84,    85,   110,   221,   108,
       0,   224,   225,     0,     0,   221,   221,   221,   221,   221,
     223,   222,    18,     0,   238,   239,   240,     0,   235,     0,
       0,     0,   253,   252,   221,     0,    57,    58,     0,    62,
      64,   119,   120,   196,   197,   121,   212,   213,    59,   215,
     251,     0,   111,   112,   116,   117,   118,   210,   211,   214,
       0,    92,     0,     0,   230,   246,    19,     0,    25,     0,
       0,     0,     0,   241,   242,   236,     0,   245,    94,    96,
      98,     0,   240,   243,     0,     0,    93,     0,     0,   237,
       0,   237,     0,   243,     0,     0,     0,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   135,     0,     0,   221,
       0,     0,   220,   227,   229,    80,   221,   221,   221,    50,
      79,   244,     0,    95,   103,    97,    99,     0,     0,     0,
       0,     0,     0,   152,   151,     0,     0,     0,   167,   168,
     166,     0,   172,   173,   171,   191,   186,   187,   243,     0,
       0,   179,     0,   221,   216,    49,     0,     0,    66,    67,
       0,    68,     0,   109,    51,    81,    32,    34,     0,     0,
     105,     0,     0,   102,     0,   208,     0,   209,   137,   138,
     139,   140,   141,   136,     0,   158,   153,     0,   160,   161,
       0,     0,   170,     0,   185,   188,     0,     0,   181,   182,
     183,   178,   180,     0,     0,     0,    56,    82,    55,    63,
      70,    77,   221,   221,   104,   100,   101,   203,   207,     0,
     237,   162,   163,   164,   165,   159,     0,     0,   193,     0,
     194,     0,     0,   184,   221,   217,   221,     0,     0,    69,
       0,     0,     0,   114,   122,   125,   123,   198,   199,   124,
      47,   146,   143,   144,   145,     0,   149,   147,   142,     0,
     169,   192,   189,     0,   195,   174,     0,     0,    71,    73,
      72,    74,     0,     0,   126,   176,   221,   113,   150,   148,
     155,   156,   157,   154,   190,   221,   218,     0,     0,     0,
       0,   175,   115,     0,   221,     0,   201,     0,   205,     0,
     219,     0,   200,     0,   204,     0,     0,     0,   202,   206,
       0,   221,     0,     0,   177,    54
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -102,  -113,    92,  -347,  -347,  -328,  -107,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,   103,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,   218,  -347,
    -347,  -347,    99,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,   -62,  -347,  -106,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,    91,  -347,  -347,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -347,  -347,  -347,   -10,  -347,  -347,
    -338,  -347,  -347,  -347,  -347,  -347,   225,  -347,  -347,  -347,
    -347,  -347,  -347,  -347,  -324,  -346,   227,  -347,  -347,  -347,
    -105,  -121,   -92,  -347,  -347,  -347,  -347,  -347,   228,  -347,
    -182,   147,  -161,  -347,  -347,   -23,    -8,    -6,   -65,   -99,
     187
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,     4,     7,     8,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
     122,   166,    74,    69,   255,   305,   135,    75,   136,   137,
     138,   257,   258,   259,   339,   368,   370,    76,    70,   310,
      95,   219,   264,   306,   104,   105,    59,    60,   139,   186,
     272,   223,   269,    61,    62,    63,   151,   109,   263,   342,
     153,   140,   343,   344,   141,   198,   283,   199,   358,   379,
     200,   234,   201,   383,   284,   202,   290,   325,   203,   240,
     204,   291,   205,   244,   206,   374,   391,   207,   301,   302,
     332,   251,   294,   327,   329,   363,   142,   346,   347,   395,
     143,   348,   397,   144,   274,   276,   349,   145,   157,   146,
     147,   159,   160,    64,    65,   111,   112,    66,    77,   102,
     126,   175,   128,   176,    67,    79,    78,    72,    96,   308,
     149
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      10,   123,   154,   158,    71,   170,   171,   231,   152,   235,
     106,   130,   131,   208,   168,   169,   172,    81,    82,    83,
      84,    85,   226,   167,   123,   123,   167,   167,   177,   340,
     341,   150,   237,    80,    80,    80,    80,    80,    80,   387,
     129,   130,   131,   398,   132,   133,     9,   351,   233,   238,
      97,     1,    98,     5,    99,   100,   352,   353,   354,   409,
     215,   406,   355,   356,   396,   410,   245,   246,   247,   248,
     249,   365,   412,   407,   239,   120,   121,    73,   134,   408,
       9,   357,   224,   124,   125,   415,     6,   295,   250,   150,
     222,     9,     9,   120,   121,   148,   134,    93,   101,   278,
     279,   280,   281,   282,   267,   268,   165,   220,   134,   253,
      68,   261,   334,   376,   266,   148,   254,   256,   107,   335,
     377,    86,   108,   270,   123,   167,   167,   385,   270,   273,
     275,   277,   304,   285,   386,   120,   121,   285,   359,   213,
     214,    87,   292,    88,    92,    89,    94,    90,   150,    91,
     265,   321,   322,   323,   324,   103,    80,    80,    11,   148,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,   110,   328,   311,   113,   330,   124,   125,
     350,   114,    71,   115,   333,   116,   345,   158,   298,   299,
     300,   173,   174,   366,   380,   381,   382,   187,   188,   132,
     133,   167,   178,   179,   180,   181,   182,   183,   184,   185,
     242,   243,   364,   288,   289,   189,   337,   338,   369,   371,
     117,   190,   372,   373,   367,   191,   118,   192,   193,   119,
     307,   129,   127,   162,   163,   194,    73,   195,   210,   196,
     209,   211,   197,   -65,   393,   216,   217,   218,   252,   227,
     345,   158,   221,   228,   229,   230,   262,   232,   286,   236,
     241,   297,   293,   296,   303,   360,   309,   313,   314,   275,
     277,   312,   315,   316,   317,   318,   319,   320,   326,   331,
     333,   336,   401,   378,   275,   361,   277,   362,   365,   390,
     384,   333,   388,   260,   392,   389,   394,   400,   399,   413,
     402,   403,   404,   405,   411,   414,   271,   287,   161,   225,
       0,   375,     0,   155,     0,   156,     0,     0,     0,     0,
       0,   164,     0,     0,     0,     0,     0,   212,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   307,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   307,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   307
};

static const yytype_int16 yycheck[] =
{
       6,    93,   108,   108,    12,   118,   119,   189,   107,   191,
      75,    40,    41,   134,   116,   117,   123,    40,    41,    42,
      43,    44,   183,   115,   116,   117,   118,   119,   127,    40,
      41,    43,   193,    39,    40,    41,    42,    43,    44,   367,
      39,    40,    41,   389,    43,    44,    45,    48,    57,    52,
      48,     3,    50,     0,    52,    53,    57,    58,    59,   405,
     167,   399,    63,    64,   388,    97,    87,    88,    89,    90,
      91,   103,   410,   401,    77,   104,   105,    42,   107,   403,
      45,    82,   181,    92,    93,   413,     5,   248,   109,    43,
     102,    45,    45,   104,   105,   103,   107,   101,    96,    57,
      58,    59,    60,    61,   217,   218,   114,   172,   107,   101,
     100,   210,   101,   101,   216,   123,   108,   209,   102,   108,
     108,   100,   106,   222,   216,   217,   218,   101,   227,   228,
     229,   230,   253,   232,   108,   104,   105,   236,   320,   162,
     163,    49,   241,    51,   100,    53,    46,    55,    43,    57,
     215,    72,    73,    74,    75,   101,   162,   163,     4,   167,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,   106,   293,   260,   106,   296,    92,    93,
     313,   106,   210,   101,   303,   101,   312,   312,    84,    85,
      86,    94,    95,   334,    57,    58,    59,    98,    99,    43,
      44,   313,    48,    49,    50,    51,    52,    53,    54,    55,
      81,    82,   331,    70,    71,    56,   104,   105,   337,   338,
     101,    62,    98,    99,   336,    66,   101,    68,    69,   101,
     256,    39,   102,   101,   101,    76,    42,    78,   102,    80,
     101,   103,    83,   102,   385,   101,   101,   101,    47,   102,
     376,   376,   103,   102,   102,   102,   106,   102,    67,   102,
     102,    40,   102,   102,   102,    79,   103,   101,   103,   388,
     389,   107,   103,   103,   103,   103,   103,   103,   103,   102,
     399,   101,   394,    65,   403,   103,   405,   103,   103,    47,
     103,   410,   102,   210,   376,   102,   101,   108,   102,   411,
     103,    97,   103,    97,   101,   103,   227,   236,   110,   182,
      -1,   341,    -1,   108,    -1,   108,    -1,    -1,    -1,    -1,
      -1,   113,    -1,    -1,    -1,    -1,    -1,   160,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   401,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   413
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     3,   111,   112,   113,     0,     5,   114,   115,    45,
     237,     4,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   156,
     157,   163,   164,   165,   223,   224,   227,   234,   100,   133,
     148,   236,   237,    42,   132,   137,   147,   228,   236,   235,
     237,   235,   235,   235,   235,   235,   100,   132,   132,   132,
     132,   132,   100,   101,    46,   150,   238,    48,    50,    52,
      53,    96,   229,   101,   154,   155,   238,   102,   106,   167,
     106,   225,   226,   106,   106,   101,   101,   101,   101,   101,
     104,   105,   130,   222,    92,    93,   230,   102,   232,    39,
      40,    41,    43,    44,   107,   136,   138,   139,   140,   158,
     171,   174,   206,   210,   213,   217,   219,   220,   236,   240,
      43,   166,   239,   170,   174,   206,   216,   218,   220,   221,
     222,   158,   101,   101,   228,   236,   131,   222,   130,   130,
     131,   131,   136,    94,    95,   231,   233,   239,    48,    49,
      50,    51,    52,    53,    54,    55,   159,    98,    99,    56,
      62,    66,    68,    69,    76,    78,    80,    83,   175,   177,
     180,   182,   185,   188,   190,   192,   194,   197,   221,   101,
     102,   103,   240,   235,   235,   136,   101,   101,   101,   151,
     238,   103,   102,   161,   239,   231,   232,   102,   102,   102,
     102,   230,   102,    57,   181,   230,   102,   232,    52,    77,
     189,   102,    81,    82,   193,    87,    88,    89,    90,    91,
     109,   201,    47,   101,   108,   134,   222,   141,   142,   143,
     148,   239,   106,   168,   152,   238,   130,   131,   131,   162,
     239,   162,   160,   239,   214,   239,   215,   239,    57,    58,
      59,    60,    61,   176,   184,   239,    67,   184,    70,    71,
     186,   191,   239,   102,   202,   232,   102,    40,    84,    85,
      86,   198,   199,   102,   221,   135,   153,   237,   239,   103,
     149,   238,   107,   101,   103,   103,   103,   103,   103,   103,
     103,    72,    73,    74,    75,   187,   103,   203,   239,   204,
     239,   102,   200,   239,   101,   108,   101,   104,   105,   144,
      40,    41,   169,   172,   173,   174,   207,   208,   211,   216,
     131,    48,    57,    58,    59,    63,    64,    82,   178,   230,
      79,   103,   103,   205,   239,   103,   221,   222,   145,   239,
     146,   239,    98,    99,   195,   197,   101,   108,    65,   179,
      57,    58,    59,   183,   103,   101,   108,   135,   102,   102,
      47,   196,   172,   221,   101,   209,   214,   212,   215,   102,
     108,   222,   103,    97,   103,    97,   200,   135,   214,   215,
      97,   101,   200,   222,   103,   135
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,   110,   111,   112,   113,   113,   114,   115,   115,   116,
     116,   117,   117,   117,   117,   117,   117,   117,   118,   119,
     120,   120,   120,   120,   120,   121,   122,   122,   122,   122,
     122,   122,   123,   124,   125,   126,   126,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   135,   136,   136,   136,
     137,   137,   138,   139,   139,   140,   141,   141,   142,   143,
     144,   144,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   152,   153,   154,   154,   155,   156,   156,   156,   156,
     156,   156,   157,   158,   159,   159,   159,   159,   159,   159,
     159,   159,   160,   161,   161,   162,   163,   163,   164,   165,
     166,   166,   167,   168,   169,   169,   170,   170,   170,   171,
     171,   171,   172,   172,   172,   173,   173,   174,   174,   174,
     174,   174,   174,   174,   174,   174,   175,   176,   176,   176,
     176,   176,   177,   178,   178,   178,   178,   178,   178,   178,
     179,   180,   181,   181,   182,   183,   183,   183,   184,   185,
     186,   186,   187,   187,   187,   187,   188,   189,   189,   190,
     191,   192,   193,   193,   194,   195,   196,   196,   197,   198,
     198,   199,   199,   199,   200,   201,   201,   201,   201,   201,
     201,   202,   202,   203,   204,   205,   206,   206,   207,   207,
     208,   209,   209,   210,   211,   212,   212,   213,   214,   215,
     216,   216,   217,   217,   218,   219,   220,   220,   220,   220,
     221,   222,   222,   222,   223,   224,   225,   225,   226,   226,
     227,   228,   228,   228,   228,   228,   229,   230,   230,   230,
     231,   231,   231,   232,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   240
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     3,     2,     0,     3,     2,     0,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     4,     4,
       1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
       1,     1,     6,     1,     6,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     8,     1,     6,
       3,     3,     2,     2,    11,     1,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     1,     1,     1,     1,     3,
       0,     2,     2,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     2,     1,     2,     1,     2,     1,     2,
       4,     4,     1,     1,     3,     1,     1,     1,     3,     6,
       0,     1,     2,     4,     1,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     3,     1,     1,     1,
       1,     1,     5,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     1,     2,     6,     1,     1,     1,     1,     4,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     5,
       1,     2,     1,     1,     5,     2,     0,     6,     3,     0,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     4,
       5,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       5,     1,     3,     5,     5,     1,     3,     5,     1,     1,
       1,     1,     1,     1,     1,     1,     3,     5,     7,     9,
       2,     0,     1,     1,     3,     3,     0,     3,     0,     3,
       4,     2,     2,     2,     2,     3,     3,     0,     1,     1,
       0,     1,     1,     0,     3,     1,     4,     1,     1,     1,
       1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (irtree, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, irtree); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (irtree);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, irtree);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void* irtree)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , irtree);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, irtree); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void* irtree)
{
  YYUSE (yyvaluep);
  YYUSE (irtree);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void* irtree)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 164 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    { 
            ((IRProgram *)irtree)->setHeaderString(string((yyvsp[-1].token_atrib).texto->c_str()));
        }
#line 1750 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 3:
#line 169 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            ((IRProgram *)irtree)->addOptionList((yyvsp[-2].optlist));
            ((IRProgram *)irtree)->addStatementList((yyvsp[-1].stmntlist));
        }
#line 1759 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 4:
#line 175 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-1].optlist)->push_back((yyvsp[0].iroption));
            (yyval.optlist) = (yyvsp[-1].optlist);
        }
#line 1768 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 5:
#line 180 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.optlist) = new list<IROption*>;
        }
#line 1776 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 6:
#line 185 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iroption) = new VP1IROption((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
        }
#line 1784 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 7:
#line 190 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].stmntlist)->push_back((yyvsp[0].irstatement));
            (yyval.stmntlist) = (yyvsp[-1].stmntlist);
        }
#line 1793 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 8:
#line 195 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.stmntlist) = new list<IRStatement *>;
        }
#line 1801 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 9:
#line 200 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[-1].irinstruction);
        }
#line 1809 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 10:
#line 204 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[-1].irstatement);
        }
#line 1817 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 11:
#line 214 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1825 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 12:
#line 218 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1833 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 13:
#line 223 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1841 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 14:
#line 227 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1849 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 15:
#line 231 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1857 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 16:
#line 235 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1865 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 17:
#line 239 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irswzinstr);
        }
#line 1873 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 18:
#line 244 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[-3].token_atrib).linea,string((yyvsp[-3].token_atrib).texto->c_str()));
            (yyvsp[-2].irdstoperand)->setLine((yyval.irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyval.irinstruction)->getLine());
            (yyval.irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyval.irinstruction)->setSource0((yyvsp[0].irsrcoperand));
        }
#line 1885 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 19:
#line 253 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 1897 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 20:
#line 262 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1905 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 21:
#line 266 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1913 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 22:
#line 270 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1921 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 23:
#line 274 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1929 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 24:
#line 278 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1937 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 25:
#line 283 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 1949 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 26:
#line 292 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1957 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 27:
#line 296 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1965 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 28:
#line 300 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1973 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 29:
#line 304 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1981 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 30:
#line 308 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1989 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 31:
#line 312 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1997 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 32:
#line 317 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2011 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 33:
#line 328 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2019 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 34:
#line 333 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2033 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 35:
#line 344 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2041 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 36:
#line 348 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2049 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 37:
#line 352 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2057 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 38:
#line 356 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2065 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 39:
#line 360 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2073 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 40:
#line 364 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2081 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 41:
#line 368 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2089 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 42:
#line 372 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2097 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 43:
#line 376 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2105 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 44:
#line 380 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2113 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 45:
#line 384 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2121 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 46:
#line 388 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2129 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 47:
#line 394 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-6].irdstoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-4].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-7].irinstruction)->setDest((yyvsp[-6].irdstoperand));
            (yyvsp[-7].irinstruction)->setSource0((yyvsp[-4].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource1((yyvsp[-2].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource2((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-7].irinstruction);
        }
#line 2145 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 48:
#line 407 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2153 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 49:
#line 412 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzinstr) = new IRSwizzleInstruction((yyvsp[-5].token_atrib).linea,string((yyvsp[-5].token_atrib).texto->c_str()));
            (yyvsp[-4].irdstoperand)->setLine((yyval.irswzinstr)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyval.irswzinstr)->getLine());
            (yyvsp[0].irswzcomps)->setLine((yyval.irswzinstr)->getLine());
            (yyval.irswzinstr)->setDest((yyvsp[-4].irdstoperand));
            (yyval.irswzinstr)->setSource0((yyvsp[-2].irsrcoperand));
            (yyval.irswzinstr)->setSwizzleComponents((yyvsp[0].irswzcomps));
        }
#line 2167 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 50:
#line 428 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2177 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 51:
#line 435 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2187 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 52:
#line 442 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irdstoperand)->setWriteMask(*(yyvsp[0].str));
            (yyval.irdstoperand) = (yyvsp[-1].irdstoperand);
        }
#line 2196 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 53:
#line 448 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[-1].str));
            (yyval.irdstoperand)->setWriteMask(*(yyvsp[0].str));
        }
#line 2205 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 54:
#line 457 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzcomps) = new IRSwizzleComponents();
            (yyval.irswzcomps)->setComponent(0,(yyvsp[-9].irswzcomp),(yyvsp[-10].boolean));
            (yyval.irswzcomps)->setComponent(1,(yyvsp[-6].irswzcomp),(yyvsp[-7].boolean));
            (yyval.irswzcomps)->setComponent(2,(yyvsp[-3].irswzcomp),(yyvsp[-4].boolean));
            (yyval.irswzcomps)->setComponent(3,(yyvsp[0].irswzcomp),(yyvsp[-1].boolean));
        }
#line 2217 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 55:
#line 466 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[0].intconst)==0) (yyval.irswzcomp) = IRSwizzleComponents::ZERO;
            else (yyval.irswzcomp) = IRSwizzleComponents::ONE;
        }
#line 2226 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 56:
#line 471 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzcomp) = (yyvsp[0].irswzcomp);
        }
#line 2234 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 57:
#line 476 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
            (yyval.irsrcoperand)->setIsVertexRegister(true);
        }
#line 2243 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 58:
#line 481 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irsrcoperand) = (yyvsp[0].irsrcoperand);
        }
#line 2251 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 59:
#line 487 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
        }
#line 2259 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 60:
#line 492 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
            (yyval.irdstoperand)->setIsVertexResultRegister(true);
        }
#line 2268 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 61:
#line 499 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
        }
#line 2276 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 62:
#line 504 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2284 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 63:
#line 509 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[-3].str));
            (yyval.irsrcoperand)->setArrayAddressing((yyvsp[-1].irarrayaddr));
        }
#line 2293 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 64:
#line 514 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(string(""));
            (yyval.irsrcoperand)->setParamBinding((yyvsp[0].irparambind));
        }
#line 2302 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 65:
#line 520 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2310 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 66:
#line 525 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irarrayaddr) = (yyvsp[0].irarrayaddr);           
        }
#line 2318 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 67:
#line 529 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irarrayaddr) = (yyvsp[0].irarrayaddr);
        }
#line 2326 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 68:
#line 534 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irarrayaddr) = new IRArrayAddressing((yyvsp[0].intconst));
        }
#line 2334 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 69:
#line 539 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irarrayaddr) = new IRArrayAddressing(0,true);
            (yyval.irarrayaddr)->setRelativeAddressing(*(yyvsp[-2].str), *(yyvsp[-1].str), (yyvsp[0].intconst));
        }
#line 2343 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 70:
#line 545 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    { 
            (yyval.intconst) = 0; // Default offset
        }
#line 2351 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 71:
#line 549 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2359 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 72:
#line 553 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = -(yyvsp[0].intconst);
        }
#line 2367 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 73:
#line 559 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2375 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 74:
#line 564 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2383 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 75:
#line 569 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2391 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 76:
#line 574 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2399 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 77:
#line 579 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    { 
            (yyval.str) = (yyvsp[0].str);
        }
#line 2407 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 78:
#line 584 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2415 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 79:
#line 589 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str)= (yyvsp[0].str);
        }
#line 2423 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 80:
#line 594 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), "xyzw"); 
            // $$ = new string("xyzw");
        }
#line 2432 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 81:
#line 599 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2440 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 82:
#line 606 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            if (!(yyvsp[0].str)->compare("x")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("y")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("z")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("w")) (yyval.irswzcomp) = IRSwizzleComponents::W;
            else if (!(yyvsp[0].str)->compare("r")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("g")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("b")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("a")) (yyval.irswzcomp) = IRSwizzleComponents::W;
        }
#line 2455 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 83:
#line 618 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), "xyzw"); 
            //$$ = new string("xyzw");
        }
#line 2464 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 84:
#line 623 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2472 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 85:
#line 649 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2480 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 86:
#line 660 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irattrstmnt);
        }
#line 2488 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 87:
#line 664 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irparamstmnt);
        }
#line 2496 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 88:
#line 668 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irtempstmnt);
        }
#line 2504 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 89:
#line 672 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].iraddrstmnt);
        }
#line 2512 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 90:
#line 676 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].iroutputstmnt);
        }
#line 2520 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 91:
#line 680 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].iraliasstmnt);
        }
#line 2528 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 92:
#line 685 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irattrstmnt) = new VP1IRATTRIBStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.irattrstmnt)->setInputAttribute(*(yyvsp[0].str));
        }
#line 2537 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 93:
#line 691 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2545 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 94:
#line 696 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2554 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 95:
#line 701 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str));
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 2565 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 96:
#line 708 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2574 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 97:
#line 713 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 2585 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 98:
#line 720 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2594 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 99:
#line 725 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 2605 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 100:
#line 732 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 2616 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 101:
#line 739 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 2627 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 102:
#line 747 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2635 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 103:
#line 752 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 2643 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 104:
#line 757 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 2651 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 105:
#line 763 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2659 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 106:
#line 768 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 2667 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 107:
#line 772 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 2675 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 108:
#line 777 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str),false);
            (yyval.irparamstmnt)->setSize(-1);
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 2685 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 109:
#line 785 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-5].token_atrib).linea,*(yyvsp[-4].str),true);
            (yyval.irparamstmnt)->setSize((yyvsp[-2].intconst));
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 2695 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 110:
#line 792 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = -1; // It means that no optional size is specified
        }
#line 2703 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 111:
#line 798 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2711 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 112:
#line 803 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = new list<IRParamBinding *>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 2720 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 113:
#line 809 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = (yyvsp[-1].pbindlist);
        }
#line 2728 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 114:
#line 814 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = new list<IRParamBinding*>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 2737 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 115:
#line 819 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-2].pbindlist)->push_back((yyvsp[0].irparambind));
            (yyval.pbindlist) = (yyvsp[-2].pbindlist);
        }
#line 2746 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 116:
#line 825 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2754 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 117:
#line 829 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2762 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 118:
#line 833 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2770 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 119:
#line 838 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2779 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 120:
#line 843 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2788 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 121:
#line 848 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2797 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 122:
#line 854 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2805 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 123:
#line 858 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2813 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 124:
#line 862 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2821 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 125:
#line 867 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 2829 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 126:
#line 871 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 2837 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 127:
#line 876 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2845 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 128:
#line 880 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2853 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 129:
#line 884 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2861 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 130:
#line 888 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2869 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 131:
#line 892 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2877 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 132:
#line 896 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2885 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 133:
#line 900 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2893 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 134:
#line 904 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 2901 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 135:
#line 908 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 2909 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 136:
#line 913 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 2921 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 137:
#line 922 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2930 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 138:
#line 927 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2939 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 139:
#line 932 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2948 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 140:
#line 937 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2957 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 141:
#line 942 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2966 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 142:
#line 948 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-4].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-2].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 2978 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 143:
#line 957 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2987 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 144:
#line 962 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2996 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 145:
#line 967 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3005 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 146:
#line 972 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3014 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 147:
#line 978 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3023 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 148:
#line 984 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3034 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 149:
#line 991 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3043 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 150:
#line 997 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3052 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 151:
#line 1003 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3063 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 152:
#line 1011 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3072 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 153:
#line 1016 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*((yyvsp[0].token_atrib).texto))
        }
#line 3083 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 154:
#line 1025 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-5].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-3].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3096 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 155:
#line 1035 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            // $$ = new string(*($1.texto));
        }
#line 3105 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 156:
#line 1040 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3114 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 157:
#line 1045 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3123 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 158:
#line 1051 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3131 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 159:
#line 1056 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-2].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3144 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 160:
#line 1066 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3153 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 161:
#line 1071 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3162 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 162:
#line 1078 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3171 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 163:
#line 1083 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3180 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 164:
#line 1088 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3189 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 165:
#line 1093 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3198 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 166:
#line 1099 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3209 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 167:
#line 1107 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3218 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 168:
#line 1112 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3227 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 169:
#line 1118 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-4].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-2].intconst))
            APPEND_STR(*(yyval.str),*((yyvsp[0].token_atrib).texto))
        }
#line 3239 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 170:
#line 1127 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3247 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 171:
#line 1132 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3258 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 172:
#line 1140 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3267 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 173:
#line 1145 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3276 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 174:
#line 1151 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-4].str))
            APPEND_STR(*(yyval.str),".row")
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3288 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 175:
#line 1160 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-1].str))
            APPEND_STR(*(yyval.str), *(yyvsp[0].str))
        }
#line 3299 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 176:
#line 1168 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), ".row[0..3]"); 
            //$$ = new string(".row[0..3]");
        }
#line 3308 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 177:
#line 1173 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),".row[")
            APPEND_ROW_RANGE_SELECTION(*(yyval.str),(yyvsp[-3].intconst),(yyvsp[-1].intconst))
        }
#line 3319 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 178:
#line 1181 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3331 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 179:
#line 1190 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), ".normal"); 
            //$$ = new string(".normal");
        }
#line 3340 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 180:
#line 1195 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3348 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 181:
#line 1200 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3357 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 182:
#line 1205 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3366 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 183:
#line 1210 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3375 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 184:
#line 1216 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3383 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 185:
#line 1221 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3394 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 186:
#line 1228 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3403 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 187:
#line 1233 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3412 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 188:
#line 1238 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3423 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 189:
#line 1245 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3434 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 190:
#line 1252 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3445 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 191:
#line 1260 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 3453 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 192:
#line 1264 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3461 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 193:
#line 1269 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3469 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 194:
#line 1274 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3477 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 195:
#line 1279 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3485 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 196:
#line 1284 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 3493 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 197:
#line 1288 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 3501 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 198:
#line 1293 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3509 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 199:
#line 1297 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3517 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 200:
#line 1302 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 3526 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 201:
#line 1308 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 3535 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 202:
#line 1313 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 3544 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 203:
#line 1319 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 3554 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 204:
#line 1326 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 3563 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 205:
#line 1332 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 3572 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 206:
#line 1337 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 3581 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 207:
#line 1343 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 3591 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 208:
#line 1350 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3599 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 209:
#line 1355 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3607 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 210:
#line 1360 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3615 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 211:
#line 1364 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3623 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 212:
#line 1369 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3631 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 213:
#line 1373 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3639 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 214:
#line 1378 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),0.0f,0.0f,0.0f,true);
        }
#line 3647 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 215:
#line 1383 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),true);
        }
#line 3655 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 216:
#line 1388 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-1].floatconst),0.0f,0.0f,1.0f);
        }
#line 3663 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 217:
#line 1393 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-3].floatconst),(yyvsp[-1].floatconst),0.0f,1.0f);
        }
#line 3671 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 218:
#line 1399 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst),1.0f);
        }
#line 3679 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 219:
#line 1406 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-7].floatconst),(yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst));
        }
#line 3687 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 220:
#line 1411 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].boolean)) (yyval.floatconst) = (-1)*(yyvsp[0].floatconst);
            else (yyval.floatconst) = (yyvsp[0].floatconst);
        }
#line 3696 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 221:
#line 1417 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = false;
        }
#line 3704 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 222:
#line 1421 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = true;
        }
#line 3712 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 223:
#line 1425 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = false;
        }
#line 3720 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 224:
#line 1430 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irtempstmnt) = new IRTEMPStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
            (yyval.irtempstmnt)->setOtherTemporaries((yyvsp[0].strlist));
        }
#line 3729 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 225:
#line 1436 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iraddrstmnt) = new IRADDRESSStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
            (yyval.iraddrstmnt)->setOtherAddressRegisters((yyvsp[0].strlist));
        }
#line 3738 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 226:
#line 1442 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.strlist) = new list<string>();
        }
#line 3746 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 227:
#line 1446 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-2].strlist)->push_back(*(yyvsp[0].str));
            (yyval.strlist) = (yyvsp[-2].strlist);
        }
#line 3755 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 228:
#line 1452 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.strlist) = new list<string>();
        }
#line 3763 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 229:
#line 1456 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-2].strlist)->push_back(*(yyvsp[0].str));
            (yyval.strlist) = (yyvsp[-2].strlist);
        }
#line 3772 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 230:
#line 1463 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iroutputstmnt) = new VP1IROUTPUTStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iroutputstmnt)->setOutputAttribute(*(yyvsp[0].str));
        }
#line 3781 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 231:
#line 1469 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 3790 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 232:
#line 1474 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.str) = (yyvsp[0].str);
        }
#line 3798 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 233:
#line 1478 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 3807 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 234:
#line 1483 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 3816 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 235:
#line 1488 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3827 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 236:
#line 1496 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3839 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 237:
#line 1505 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), ".front"); 
            //$$ = new string(".front"); // Default
        }
#line 3848 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 238:
#line 1510 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3857 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 239:
#line 1515 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3866 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 240:
#line 1521 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), ".primary"); 
            // $$ = new string(".primary"); // Default
        }
#line 3875 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 241:
#line 1526 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3884 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 242:
#line 1531 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3893 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 243:
#line 1537 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 3901 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 244:
#line 1541 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3909 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 245:
#line 1546 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3917 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 246:
#line 1552 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iraliasstmnt) = new IRALIASStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iraliasstmnt)->setAlias(*(yyvsp[0].str));
        }
#line 3926 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 247:
#line 1558 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.str) = (yyvsp[0].str);
        }
#line 3934 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 248:
#line 1563 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3942 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 249:
#line 1568 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), *((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3951 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 250:
#line 1574 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str), &((yyvsp[0].token_atrib).texto->c_str()[1])); 
            //$$ = new string(&($1.texto->c_str()[1]));
        }
#line 3960 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 251:
#line 1580 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.intconst))
        }
#line 3968 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 252:
#line 1585 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 3976 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;

  case 253:
#line 1589 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 3984 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
    break;


#line 3988 "ARBP/VertexProgram/VP1Bison.gen" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (irtree, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (irtree, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, irtree);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, irtree);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (irtree, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, irtree);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, irtree);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1593 "ARBP/VertexProgram/VP1Grammar.y" /* yacc.c:1906  */


#include "VP1Flex.gen" 

int vp1StartParse(void *ptr)
{  
    yyparse(ptr);
    
    list<string*>::iterator iter = vp1LexSymbolCollector.begin();
    
    while(iter != vp1LexSymbolCollector.end())
    {   
        //delete (*iter);
        iter++;
    }
    
    vp1LexSymbolCollector.clear();

    iter = vp1ASTStringCollector.begin();
    
    while(iter != vp1ASTStringCollector.end())
    {   
        //delete (*iter);
        iter++;
    }
    
    vp1ASTStringCollector.clear();
    
    return 0;
}
