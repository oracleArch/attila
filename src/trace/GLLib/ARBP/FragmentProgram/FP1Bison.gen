/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         fp1parse
#define yylex           fp1lex
#define yyerror         fp1error
#define yydebug         fp1debug
#define yynerrs         fp1nerrs

#define yylval          fp1lval
#define yychar          fp1char

/* Copy the first part of user declarations.  */
#line 14 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:339  */

#include <string>
#include <sstream>

using namespace std;

int yylex();

#include "IRNode.h"

using namespace libgl::GenerationCode;
using namespace libgl;

#ifndef YYDEBUG
    #define YYDEBUG 0
#endif

#define APPEND_STR(str,str1)                       { (str).append(str1); }
#define APPEND_NUMBER_SELECTION(string,number)     { stringstream ss; ss << "[" << number << "]"; (string).append(ss.str()); }
#define APPEND_ROW_RANGE_SELECTION(string,min,max) { stringstream ss; ss << "[" << min << ".." << max << "]"; (string).append(ss.str()); }
#define STRING_TO_VAR(str, var)                    { stringstream ss(str, ios::in); ss >> var; }

#define CREATE_STRING(str_ptr,TEXT)                { (str_ptr) = new string(TEXT); fp1ASTStringCollector.push_back(str_ptr); }

#define CREATE_EMPTY_STRING(str_ptr)               CREATE_STRING(str_ptr, "")


void yyerror(void* irtree, char *s)
{
    panic("FP1Grammar.y","yyerror()","Sintactic error in Fragment Program");
}

typedef struct{
  string* texto;
  int linea;
} type_token_atrib;  

list<string*> fp1LexSymbolCollector;

list<string*> fp1ASTStringCollector;


#line 117 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif


/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 1
#endif
#if YYDEBUG
extern int fp1debug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    TOK_ARBFP10_HEADER = 258,
    TOK_OPTION = 259,
    TOK_PARAM = 260,
    TOK_ATTRIB = 261,
    TOK_TEMP = 262,
    TOK_OUTPUT = 263,
    TOK_ALIAS = 264,
    TOK_ABS = 265,
    TOK_ADD = 266,
    TOK_CMP = 267,
    TOK_COS = 268,
    TOK_DP3 = 269,
    TOK_DP4 = 270,
    TOK_DPH = 271,
    TOK_DST = 272,
    TOK_EX2 = 273,
    TOK_FLR = 274,
    TOK_FRC = 275,
    TOK_KIL = 276,
    TOK_LG2 = 277,
    TOK_LIT = 278,
    TOK_LRP = 279,
    TOK_MAD = 280,
    TOK_MAX = 281,
    TOK_MIN = 282,
    TOK_MOV = 283,
    TOK_MUL = 284,
    TOK_POW = 285,
    TOK_RCP = 286,
    TOK_RSQ = 287,
    TOK_SIN = 288,
    TOK_SCS = 289,
    TOK_SGE = 290,
    TOK_SLT = 291,
    TOK_SUB = 292,
    TOK_SWZ = 293,
    TOK_TEX = 294,
    TOK_TXB = 295,
    TOK_TXP = 296,
    TOK_XPD = 297,
    TOK_ABS_SAT = 298,
    TOK_ADD_SAT = 299,
    TOK_CMP_SAT = 300,
    TOK_COS_SAT = 301,
    TOK_DP3_SAT = 302,
    TOK_DP4_SAT = 303,
    TOK_DPH_SAT = 304,
    TOK_DST_SAT = 305,
    TOK_EX2_SAT = 306,
    TOK_FLR_SAT = 307,
    TOK_FRC_SAT = 308,
    TOK_LG2_SAT = 309,
    TOK_LIT_SAT = 310,
    TOK_LRP_SAT = 311,
    TOK_MAD_SAT = 312,
    TOK_MAX_SAT = 313,
    TOK_MIN_SAT = 314,
    TOK_MOV_SAT = 315,
    TOK_MUL_SAT = 316,
    TOK_POW_SAT = 317,
    TOK_RCP_SAT = 318,
    TOK_RSQ_SAT = 319,
    TOK_SIN_SAT = 320,
    TOK_SCS_SAT = 321,
    TOK_SGE_SAT = 322,
    TOK_SLT_SAT = 323,
    TOK_SUB_SAT = 324,
    TOK_SWZ_SAT = 325,
    TOK_TEX_SAT = 326,
    TOK_TXB_SAT = 327,
    TOK_TXP_SAT = 328,
    TOK_XPD_SAT = 329,
    TOK_PROGRAM = 330,
    TOK_RESULT = 331,
    TOK_STATE = 332,
    TOK_FRAGMENT = 333,
    TOK_TEXTURE = 334,
    TOK_COLOR = 335,
    TOK_PRIMARY = 336,
    TOK_SECONDARY = 337,
    TOK_TEXCOORD = 338,
    TOK_FOGCOORD = 339,
    TOK_POSITION = 340,
    TOK_ATTRIB_M = 341,
    TOK_ENV = 342,
    TOK_LOCAL = 343,
    TOK_MATERIAL = 344,
    TOK_AMBIENT = 345,
    TOK_DIFFUSE = 346,
    TOK_SPECULAR = 347,
    TOK_EMISSION = 348,
    TOK_SHININESS = 349,
    TOK_FRONT = 350,
    TOK_BACK = 351,
    TOK_LIGHT = 352,
    TOK_SPOT = 353,
    TOK_DIRECTION = 354,
    TOK_HALF = 355,
    TOK_ATTENUATION = 356,
    TOK_LIGHTMODEL = 357,
    TOK_SCENECOLOR = 358,
    TOK_LIGHTPROD = 359,
    TOK_TEXENV = 360,
    TOK_FOG = 361,
    TOK_PARAMS = 362,
    TOK_DEPTH = 363,
    TOK_RANGE = 364,
    TOK_MATRIX = 365,
    TOK_MODELVIEW = 366,
    TOK_PROJECTION = 367,
    TOK_MVP = 368,
    TOK_PALETTE = 369,
    TOK_INVERSE = 370,
    TOK_TRANSPOSE = 371,
    TOK_INVTRANS = 372,
    TOK_ROW = 373,
    TOK_POINT_POINT = 374,
    TOK_INT_CONST = 375,
    TOK_FLOAT_CONST = 376,
    TOK_IDENT = 377,
    TOK_COMPONENT = 378,
    TOK_1D = 379,
    TOK_2D = 380,
    TOK_3D = 381,
    TOK_CUBE = 382,
    TOK_RECT = 383,
    TOK_END = 384
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 56 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:355  */
         
  type_token_atrib                          token_atrib;
  string*                                   str;
  float                                     floatconst;
  int                                       intconst;
  bool                                      boolean;
  list<string>*                             strlist;
  list<IROption*>*                          optlist;
  list<IRStatement*>*                       stmntlist;
  list<IRParamBinding*>*                    pbindlist;
  IRNode*                                   irnode;
  IRProgram*                                irprogram;
  IROption*                                 iroption;
  IRStatement*                              irstatement;
  IRInstruction*                            irinstruction;
  IRSampleInstruction*                      irsamplinstr;
  IRSwizzleInstruction*                     irswzinstr;
  IRSwizzleComponents*                      irswzcomps;
  IRSwizzleComponents::swzComponent         irswzcomp;
  IRDstOperand*                             irdstoperand;
  IRSrcOperand*                             irsrcoperand;
  IRALIASStatement*                         iraliasstmnt;
  IRTEMPStatement*                          irtempstmnt;
  IRATTRIBStatement*                        irattrstmnt;
  IROUTPUTStatement*                        iroutputstmnt;
  IRPARAMStatement*                         irparamstmnt;
  IRParamBinding*                           irparambind;
  IRLocalEnvBinding*                        irlocalenvbind;

#line 314 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE fp1lval;

int fp1parse (void* irtree);



/* Copy the second part of user declarations.  */

#line 331 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  5
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   432

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  139
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  123
/* YYNRULES -- Number of rules.  */
#define YYNRULES  271
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  421

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   384

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   138,   131,   137,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,   130,
       2,   134,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   132,     2,   133,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   135,     2,   136,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   159,   159,   164,   170,   176,   180,   185,   191,   195,
     199,   209,   213,   218,   222,   226,   230,   234,   238,   243,
     247,   252,   262,   266,   270,   274,   278,   282,   286,   290,
     294,   298,   303,   313,   317,   321,   325,   329,   333,   337,
     341,   345,   349,   353,   357,   361,   365,   370,   382,   386,
     391,   403,   407,   411,   415,   419,   423,   427,   431,   435,
     439,   443,   447,   451,   455,   459,   463,   467,   471,   475,
     479,   483,   487,   491,   495,   500,   515,   519,   523,   527,
     531,   535,   540,   552,   556,   561,   574,   578,   582,   586,
     590,   594,   599,   606,   611,   616,   621,   626,   631,   638,
     641,   646,   655,   662,   669,   675,   687,   692,   697,   704,
     709,   714,   720,   726,   731,   737,   742,   747,   753,   757,
     762,   777,   780,   785,   816,   820,   824,   828,   832,   837,
     844,   849,   856,   863,   868,   873,   881,   888,   892,   897,
     904,   913,   916,   924,   930,   935,   940,   946,   950,   954,
     959,   964,   969,   975,   979,   983,   988,   992,   997,  1001,
    1005,  1009,  1013,  1017,  1021,  1025,  1030,  1039,  1044,  1049,
    1054,  1059,  1065,  1074,  1079,  1084,  1089,  1094,  1099,  1106,
    1112,  1118,  1126,  1131,  1139,  1150,  1155,  1160,  1166,  1171,
    1180,  1187,  1190,  1195,  1200,  1208,  1213,  1219,  1227,  1233,
    1242,  1251,  1255,  1263,  1273,  1277,  1282,  1287,  1292,  1298,
    1303,  1310,  1315,  1320,  1327,  1334,  1343,  1346,  1351,  1357,
    1360,  1365,  1370,  1375,  1380,  1384,  1389,  1393,  1398,  1404,
    1409,  1415,  1422,  1428,  1433,  1439,  1446,  1451,  1456,  1460,
    1465,  1469,  1474,  1479,  1484,  1488,  1493,  1499,  1507,  1514,
    1517,  1521,  1526,  1533,  1536,  1542,  1549,  1554,  1561,  1565,
    1570,  1577,  1581,  1586,  1592,  1599,  1604,  1609,  1615,  1621,
    1626,  1630
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "TOK_ARBFP10_HEADER", "TOK_OPTION",
  "TOK_PARAM", "TOK_ATTRIB", "TOK_TEMP", "TOK_OUTPUT", "TOK_ALIAS",
  "TOK_ABS", "TOK_ADD", "TOK_CMP", "TOK_COS", "TOK_DP3", "TOK_DP4",
  "TOK_DPH", "TOK_DST", "TOK_EX2", "TOK_FLR", "TOK_FRC", "TOK_KIL",
  "TOK_LG2", "TOK_LIT", "TOK_LRP", "TOK_MAD", "TOK_MAX", "TOK_MIN",
  "TOK_MOV", "TOK_MUL", "TOK_POW", "TOK_RCP", "TOK_RSQ", "TOK_SIN",
  "TOK_SCS", "TOK_SGE", "TOK_SLT", "TOK_SUB", "TOK_SWZ", "TOK_TEX",
  "TOK_TXB", "TOK_TXP", "TOK_XPD", "TOK_ABS_SAT", "TOK_ADD_SAT",
  "TOK_CMP_SAT", "TOK_COS_SAT", "TOK_DP3_SAT", "TOK_DP4_SAT",
  "TOK_DPH_SAT", "TOK_DST_SAT", "TOK_EX2_SAT", "TOK_FLR_SAT",
  "TOK_FRC_SAT", "TOK_LG2_SAT", "TOK_LIT_SAT", "TOK_LRP_SAT",
  "TOK_MAD_SAT", "TOK_MAX_SAT", "TOK_MIN_SAT", "TOK_MOV_SAT",
  "TOK_MUL_SAT", "TOK_POW_SAT", "TOK_RCP_SAT", "TOK_RSQ_SAT",
  "TOK_SIN_SAT", "TOK_SCS_SAT", "TOK_SGE_SAT", "TOK_SLT_SAT",
  "TOK_SUB_SAT", "TOK_SWZ_SAT", "TOK_TEX_SAT", "TOK_TXB_SAT",
  "TOK_TXP_SAT", "TOK_XPD_SAT", "TOK_PROGRAM", "TOK_RESULT", "TOK_STATE",
  "TOK_FRAGMENT", "TOK_TEXTURE", "TOK_COLOR", "TOK_PRIMARY",
  "TOK_SECONDARY", "TOK_TEXCOORD", "TOK_FOGCOORD", "TOK_POSITION",
  "TOK_ATTRIB_M", "TOK_ENV", "TOK_LOCAL", "TOK_MATERIAL", "TOK_AMBIENT",
  "TOK_DIFFUSE", "TOK_SPECULAR", "TOK_EMISSION", "TOK_SHININESS",
  "TOK_FRONT", "TOK_BACK", "TOK_LIGHT", "TOK_SPOT", "TOK_DIRECTION",
  "TOK_HALF", "TOK_ATTENUATION", "TOK_LIGHTMODEL", "TOK_SCENECOLOR",
  "TOK_LIGHTPROD", "TOK_TEXENV", "TOK_FOG", "TOK_PARAMS", "TOK_DEPTH",
  "TOK_RANGE", "TOK_MATRIX", "TOK_MODELVIEW", "TOK_PROJECTION", "TOK_MVP",
  "TOK_PALETTE", "TOK_INVERSE", "TOK_TRANSPOSE", "TOK_INVTRANS", "TOK_ROW",
  "TOK_POINT_POINT", "TOK_INT_CONST", "TOK_FLOAT_CONST", "TOK_IDENT",
  "TOK_COMPONENT", "TOK_1D", "TOK_2D", "TOK_3D", "TOK_CUBE", "TOK_RECT",
  "TOK_END", "';'", "','", "'['", "']'", "'='", "'{'", "'}'", "'-'", "'+'",
  "$accept", "program", "ARBFP10_program", "optionSequence", "option",
  "statementSequence", "statement", "instruction", "ALUInstruction",
  "TexInstruction", "VECTORop_instruction", "VECTORop",
  "SCALARop_instruction", "SCALARop", "BINSCop_instruction", "BINSCop",
  "BINop_instruction", "BINop", "TRIop_instruction", "TRIop",
  "SWZ_instruction", "SWZop", "SAMPLE_instruction", "SAMPLEop",
  "KIL_instruction", "texImageUnit", "texTarget", "optTexImageUnitNum",
  "texImageUnitNum", "scalarSrcReg", "vectorSrcReg", "maskedDstReg",
  "extendedSwizzle", "ExtSwizSel", "srcReg", "dstReg", "progParamReg",
  "progParamArray", "progParamArrayAbs", "scalarSuffix", "optionalSuffix",
  "xyzw_rgbaComponent", "optionalMask", "xyzw_rgbaMask", "namingStatement",
  "ATTRIB_statement", "fragAttribBinding", "fragAttribItem",
  "fragAttribNum", "PARAM_statement", "PARAM_singleStmt",
  "PARAM_multipleStmt", "optArraySize", "paramSingleInit",
  "paramMultipleInit", "paramMultInitList", "paramSingleItemDecl",
  "paramSingleItemUse", "paramMultipleItem", "stateMultipleItem",
  "stateSingleItem", "stateMaterialItem", "stateMatProperty",
  "stateLightItem", "stateLightProperty", "stateSpotProperty",
  "stateLightModelItem", "stateLModProperty", "stateLightProdItem",
  "stateLProdProperty", "stateLightNumber", "stateTexEnvItem",
  "stateTexEnvProperty", "optLegacyTexUnitNum", "legacyTexUnitNum",
  "stateFogItem", "stateFogProperty", "stateDepthItem",
  "stateDepthProperty", "stateMatrixRow", "stateMatrixRows",
  "optMatrixRows", "stateMatrixItem", "stateOptMatModifier",
  "stateMatModifier", "stateMatrixRowNum", "stateMatrixName",
  "stateOptModMatNum", "stateModMatNum", "optTexCoordNum", "texCoordNum",
  "statePaletteMatNum", "stateProgramMatNum", "programSingleItem",
  "programMultipleItem", "progEnvParams", "progEnvParamNums",
  "progEnvParam", "progLocalParams", "progLocalParamNums",
  "progLocalParam", "progEnvParamNum", "progLocalParamNum",
  "paramConstDecl", "paramConstUse", "paramConstScalarDecl",
  "paramConstScalarUse", "paramConstVector", "signedFloatConstant",
  "optionalSign", "TEMP_statement", "varNameList", "OUTPUT_statement",
  "resultBinding", "optFaceType", "optColorType", "ALIAS_statement",
  "establishName", "establishedName", "identifier", "component", "integer",
  "floatConstant", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      59,    44,    91,    93,    61,   123,   125,    45,    43
};
# endif

#define YYPACT_NINF -363

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-363)))

#define YYTABLE_NINF -116

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
      66,  -363,    85,  -363,    40,  -363,   -27,  -363,   303,  -363,
     -19,   -27,   -27,   -27,   -27,   -27,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,   -59,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,   -13,  -363,  -363,  -363,   -38,  -363,   -38,
    -363,   -38,  -363,   -38,  -363,   -38,  -363,   -38,  -363,   -38,
    -363,   -11,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
     -81,  -363,   -53,  -363,    -9,    -4,  -363,  -363,  -363,   -45,
    -363,   -44,    -8,     5,  -363,  -363,  -363,     6,    23,    25,
      27,    47,    48,  -363,    30,   -55,  -363,   103,    55,   109,
     -27,    19,     8,   -23,  -363,  -363,   -59,     5,  -363,    57,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,    58,
    -363,  -363,  -363,   -59,  -363,  -363,  -363,  -363,   -59,   -59,
     -59,   -59,   -45,   -59,  -363,    59,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,    12,  -363,   -27,  -363,  -363,    61,
      62,    44,    63,   -47,    65,    67,   -41,    82,   -20,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,    83,    93,    68,
    -363,  -363,    70,  -363,   -90,  -363,  -363,    30,  -363,  -363,
     -45,    72,    73,    74,    75,    76,    77,  -363,  -363,    30,
      30,  -363,  -363,    54,    30,  -363,  -363,   105,    30,    30,
     130,  -363,  -363,  -363,  -363,  -363,    80,    68,    84,  -363,
    -363,    86,   -14,    87,  -363,  -363,  -363,    30,  -363,    30,
     -59,  -363,    88,  -363,     5,   -59,   -59,   -59,   -59,   134,
      79,  -363,    90,  -363,    91,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,    92,  -363,  -363,    94,    95,  -363,  -363,  -363,
      30,  -363,    30,  -363,    30,  -363,  -363,  -363,  -363,  -363,
      30,    96,  -363,    97,  -363,   -66,  -363,  -363,  -363,  -363,
    -363,   100,  -363,   -24,   102,   101,   -49,  -363,  -363,    51,
      44,  -363,   104,  -363,   106,  -363,   107,  -363,   108,  -363,
    -363,  -363,   -59,  -363,   -59,   111,  -363,  -363,  -363,    30,
    -363,    41,    89,     8,   -64,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,   116,  -363,  -363,  -363,
      81,  -363,  -363,  -363,  -363,   -63,  -363,   -59,   110,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,   112,   113,  -363,    99,
     -49,  -363,  -363,  -363,  -363,  -363,  -363,  -363,   -59,  -363,
     -24,  -363,    30,    30,   117,  -363,  -363,   114,   120,   122,
     119,   123,   138,    30,  -363,   -59,  -363,    30,  -363,    30,
     -79,   -24,  -363,  -363,    30,   127,   126,   -59,  -363,   -24,
    -363
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,     5,     0,     2,     8,     1,     0,     4,     0,   267,
       0,     0,     0,     0,     0,     0,    22,    51,    76,    33,
      53,    55,    57,    59,    35,    24,    26,   249,    37,    28,
      78,    80,    61,    63,    30,    65,    48,    39,    41,    43,
      45,    67,    69,    71,    83,    86,    90,    88,    73,    23,
      52,    77,    34,    54,    56,    58,    60,    36,    25,    27,
      38,    29,    79,    81,    62,    64,    31,    66,    49,    40,
      42,    44,    46,    68,    70,    72,    84,    87,    91,    89,
      74,     3,     7,     0,    11,    12,    13,     0,    14,     0,
      15,     0,    16,     0,    17,     0,    18,     0,    19,     0,
      20,     0,   124,   125,   137,   138,   126,   127,   128,     6,
       0,   265,     0,   253,     0,     0,   250,   251,    92,     0,
       9,     0,     0,   121,   112,   111,   266,     0,     0,     0,
       0,     0,     0,    10,   141,   249,   139,     0,   252,     0,
       0,     0,     0,     0,   271,   270,   249,   118,   110,     0,
     109,   114,   150,   151,   224,   225,   152,   240,   241,   108,
     243,   256,   257,   249,   268,   104,   122,   123,   249,   249,
     249,   249,     0,   249,   269,     0,   142,   143,   147,   148,
     149,   238,   239,   242,     0,   129,     0,   255,   264,     0,
       0,   258,     0,   258,     0,   191,     0,     0,     0,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   261,   219,
     133,   134,     0,   130,     0,   103,   119,     0,    21,    32,
       0,     0,     0,     0,     0,     0,     0,   248,   254,     0,
       0,   259,   260,     0,     0,   182,   181,     0,     0,     0,
       0,   195,   196,   194,   198,   197,     0,   219,   216,   211,
     212,     0,   204,     0,   262,   263,   131,     0,   132,     0,
     249,   244,     0,   116,     0,   249,   249,   249,   249,     0,
       0,   140,     0,   236,     0,   237,   167,   168,   169,   170,
     171,   166,     0,   188,   183,     0,     0,   193,   190,   189,
       0,   213,     0,   210,     0,   206,   207,   208,   203,   205,
       0,     0,   221,     0,   136,     0,   113,   102,   117,    47,
      50,     0,    82,     0,    99,     0,   249,   231,   235,     0,
     258,   192,     0,   223,     0,   218,     0,   222,     0,   209,
     220,   135,   249,   245,   249,     0,   107,   120,   106,     0,
      93,     0,     0,     0,     0,   145,   153,   156,   154,   226,
     227,   155,   176,   173,   174,   175,     0,   179,   177,   172,
       0,   215,   217,   214,   199,     0,    75,   249,     0,   101,
      94,    95,    96,    97,    98,    85,     0,     0,   157,   201,
     249,   144,   180,   178,   185,   186,   187,   184,   249,   246,
       0,   100,     0,     0,     0,   200,   146,     0,     0,     0,
     229,     0,   233,     0,   247,   249,   228,     0,   232,     0,
       0,     0,   230,   234,     0,     0,     0,   249,   202,     0,
     105
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -150,
    -146,    64,  -363,  -361,  -149,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,    98,  -363,  -363,  -363,
    -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -160,  -363,
    -133,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
     -16,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -363,  -117,  -363,  -363,  -358,  -363,  -363,  -363,    13,
    -363,  -363,  -363,   118,  -363,  -363,  -363,  -363,  -363,  -363,
    -363,  -355,  -362,   129,  -363,  -363,  -363,  -132,  -136,  -134,
    -363,  -363,  -363,   128,  -182,  -363,  -363,     1,   -98,    -6,
    -129,  -130,    52
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     2,     3,     4,     7,     8,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   315,   375,   340,   368,   219,
     118,   122,   312,   335,   147,   123,   148,   149,   262,   307,
     215,   336,   165,   166,   101,   102,   150,   213,   303,   103,
     104,   105,   175,   136,   271,   344,   177,   151,   345,   346,
     152,   199,   281,   200,   359,   383,   201,   236,   202,   387,
     282,   203,   289,   240,   286,   204,   243,   205,   245,   206,
     378,   395,   207,   298,   299,   328,   252,   293,   324,   258,
     301,   326,   322,   153,   348,   349,   399,   154,   350,   401,
     155,   272,   274,   351,   156,   181,   157,   158,   183,   119,
     106,   138,   107,   124,   233,   256,   108,   110,   125,   126,
     167,   338,   160
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
      10,   184,   178,   182,   176,   111,   111,   111,   111,   111,
     214,   237,   184,   112,   113,   114,   115,   218,   216,   221,
     141,   159,   142,   224,   222,   223,   342,   225,   343,   398,
     141,   402,   142,   143,   220,   220,   161,   400,   121,   241,
     414,   260,   188,   235,     6,   410,   261,   413,   231,   232,
     415,   134,   412,   135,   364,   246,   416,   208,   420,   247,
     209,   210,   211,   212,   162,   332,   242,   380,   388,     1,
     333,   264,   381,   389,   159,   144,   145,     9,   116,   117,
     146,   137,   116,   117,     9,     5,   146,   263,   116,   117,
     146,   248,   249,   250,   251,     9,   174,   191,     9,   273,
     275,   295,   296,   297,   283,   192,   189,   190,   283,   287,
     193,   109,   194,   195,   196,   309,   197,   120,   198,   133,
     310,   311,   159,   163,   305,   139,   184,   302,   164,   304,
     140,   220,   144,   145,   313,   308,   352,   168,   360,   231,
     232,   353,   354,   355,   276,   277,   278,   279,   280,   356,
     174,   357,   358,   127,   169,   128,   170,   129,   171,   130,
     323,   131,   325,   132,   327,   370,   371,   372,   373,   374,
     329,   384,   385,   386,   254,   255,   376,   377,   172,   173,
     111,   143,   184,   347,   182,   121,   186,   228,   366,   217,
    -115,   244,   226,   229,   230,   234,   365,   238,   184,   239,
     257,   253,   259,   265,   266,   267,   268,   269,   284,   369,
     288,   270,   290,   314,   316,   382,   292,   394,   294,   300,
     396,   306,   285,   317,   318,   319,   379,   320,   321,   330,
     331,   334,   341,   390,   339,   185,   227,   361,   407,   362,
     363,   364,   367,   391,   392,   393,   184,   347,   182,   403,
     404,   405,   397,   179,   184,   406,   408,   409,   417,   418,
     291,     0,   273,   275,   180,     0,     0,   187,     0,     0,
       0,   411,     0,   329,     0,     0,     0,   273,     0,   275,
       0,     0,     0,   419,   329,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   337,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,     0,     0,
       0,     0,     0,     0,   337,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   337,     0,     0,     0,     0,
       0,     0,     0,   337,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    81
};

static const yytype_int16 yycheck[] =
{
       6,   135,   135,   135,   134,    11,    12,    13,    14,    15,
     146,   193,   146,    12,    13,    14,    15,   163,   147,   169,
      75,   119,    77,   172,   170,   171,    75,   173,    77,   390,
      75,   393,    77,    78,   168,   169,    80,   392,    76,    80,
     119,   131,   140,    90,     4,   403,   136,   409,    95,    96,
     411,   132,   407,   134,   133,    75,   414,    80,   419,    79,
      83,    84,    85,    86,   108,   131,   107,   131,   131,     3,
     136,   220,   136,   136,   172,   120,   121,   122,   137,   138,
     135,   134,   137,   138,   122,     0,   135,   217,   137,   138,
     135,   111,   112,   113,   114,   122,   120,    89,   122,   229,
     230,   115,   116,   117,   234,    97,    87,    88,   238,   239,
     102,   130,   104,   105,   106,   265,   108,   130,   110,   130,
     266,   267,   220,   131,   260,   134,   260,   257,   123,   259,
     134,   265,   120,   121,   268,   264,    85,   131,   320,    95,
      96,    90,    91,    92,    90,    91,    92,    93,    94,    98,
     120,   100,   101,    89,   131,    91,   131,    93,   131,    95,
     290,    97,   292,    99,   294,   124,   125,   126,   127,   128,
     300,    90,    91,    92,    81,    82,    87,    88,   131,   131,
     186,    78,   316,   316,   316,    76,   131,   186,   334,   132,
     132,   109,   133,   132,   132,   132,   332,   132,   332,   132,
     132,   118,   132,   131,   131,   131,   131,   131,   103,   339,
      80,   134,   132,    79,   135,    99,   132,   118,   132,   132,
     380,   133,   238,   133,   133,   133,   343,   133,   133,   133,
     133,   131,   131,   367,   132,   137,   184,   133,   119,   133,
     133,   133,   131,   133,   132,   132,   380,   380,   380,   132,
     136,   131,   388,   135,   388,   133,   133,   119,   131,   133,
     247,    -1,   392,   393,   135,    -1,    -1,   139,    -1,    -1,
      -1,   405,    -1,   403,    -1,    -1,    -1,   407,    -1,   409,
      -1,    -1,    -1,   417,   414,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    -1,    -1,    -1,   390,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   411,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   419,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   129
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,     3,   140,   141,   142,     0,     4,   143,   144,   122,
     258,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,   129,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   183,   184,   188,   189,   190,   249,   251,   255,   130,
     256,   258,   256,   256,   256,   256,   137,   138,   169,   248,
     130,    76,   170,   174,   252,   257,   258,   170,   170,   170,
     170,   170,   170,   130,   132,   134,   192,   134,   250,   134,
     134,    75,    77,    78,   120,   121,   135,   173,   175,   176,
     185,   196,   199,   232,   236,   239,   243,   245,   246,   257,
     261,    80,   108,   131,   123,   181,   182,   259,   131,   131,
     131,   131,   131,   131,   120,   191,   260,   195,   199,   232,
     242,   244,   246,   247,   248,   185,   131,   252,   257,    87,
      88,    89,    97,   102,   104,   105,   106,   108,   110,   200,
     202,   205,   207,   210,   214,   216,   218,   221,    80,    83,
      84,    85,    86,   186,   247,   179,   259,   132,   169,   168,
     248,   168,   169,   169,   173,   169,   133,   261,   256,   132,
     132,    95,    96,   253,   132,    90,   206,   253,   132,   132,
     212,    80,   107,   215,   109,   217,    75,    79,   111,   112,
     113,   114,   225,   118,    81,    82,   254,   132,   228,   132,
     131,   136,   177,   260,   173,   131,   131,   131,   131,   131,
     134,   193,   240,   260,   241,   260,    90,    91,    92,    93,
      94,   201,   209,   260,   103,   209,   213,   260,    80,   211,
     132,   228,   132,   226,   132,   115,   116,   117,   222,   223,
     132,   229,   260,   187,   260,   247,   133,   178,   259,   168,
     169,   169,   171,   248,    79,   164,   135,   133,   133,   133,
     133,   133,   231,   260,   227,   260,   230,   260,   224,   260,
     133,   133,   131,   136,   131,   172,   180,   258,   260,   132,
     166,   131,    75,    77,   194,   197,   198,   199,   233,   234,
     237,   242,    85,    90,    91,    92,    98,   100,   101,   203,
     253,   133,   133,   133,   133,   247,   169,   131,   167,   260,
     124,   125,   126,   127,   128,   165,    87,    88,   219,   221,
     131,   136,    99,   204,    90,    91,    92,   208,   131,   136,
     248,   133,   132,   132,   118,   220,   197,   247,   172,   235,
     240,   238,   241,   132,   136,   131,   133,   119,   133,   119,
     224,   248,   240,   241,   119,   172,   224,   131,   133,   248,
     172
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   139,   140,   141,   142,   142,   143,   144,   144,   145,
     145,   146,   146,   147,   147,   147,   147,   147,   147,   148,
     148,   149,   150,   150,   150,   150,   150,   150,   150,   150,
     150,   150,   151,   152,   152,   152,   152,   152,   152,   152,
     152,   152,   152,   152,   152,   152,   152,   153,   154,   154,
     155,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   156,   156,   156,   156,   156,   156,   156,   156,   156,
     156,   156,   156,   156,   156,   157,   158,   158,   158,   158,
     158,   158,   159,   160,   160,   161,   162,   162,   162,   162,
     162,   162,   163,   164,   165,   165,   165,   165,   165,   166,
     166,   167,   168,   169,   170,   171,   172,   172,   173,   173,
     173,   174,   174,   175,   175,   176,   177,   178,   179,   179,
     180,   181,   181,   182,   183,   183,   183,   183,   183,   184,
     185,   186,   186,   186,   186,   186,   187,   188,   188,   189,
     190,   191,   191,   192,   193,   194,   194,   195,   195,   195,
     196,   196,   196,   197,   197,   197,   198,   198,   199,   199,
     199,   199,   199,   199,   199,   199,   200,   201,   201,   201,
     201,   201,   202,   203,   203,   203,   203,   203,   203,   203,
     204,   205,   206,   206,   207,   208,   208,   208,   209,   210,
     211,   212,   212,   213,   214,   215,   215,   216,   217,   218,
     219,   220,   220,   221,   222,   222,   223,   223,   223,   224,
     225,   225,   225,   225,   225,   225,   226,   226,   227,   228,
     228,   229,   230,   231,   232,   232,   233,   233,   234,   235,
     235,   236,   237,   238,   238,   239,   240,   241,   242,   242,
     243,   243,   244,   245,   246,   246,   246,   246,   247,   248,
     248,   248,   249,   250,   250,   251,   252,   252,   253,   253,
     253,   254,   254,   254,   255,   256,   257,   258,   259,   260,
     261,   261
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     3,     2,     0,     3,     2,     0,     2,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     6,     1,     1,
       6,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     8,     1,     1,     1,     1,
       1,     1,     6,     1,     1,     8,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     0,
       3,     1,     3,     3,     2,    11,     1,     1,     1,     1,
       1,     1,     1,     4,     1,     1,     1,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     4,
       2,     2,     2,     1,     1,     4,     1,     1,     1,     3,
       6,     0,     1,     2,     4,     1,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     3,     1,     1,     1,
       1,     1,     5,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     1,     2,     6,     1,     1,     1,     1,     3,
       1,     0,     3,     1,     2,     1,     1,     2,     1,     5,
       2,     0,     6,     3,     0,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     4,     4,     0,     3,     1,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     5,     1,
       3,     5,     5,     1,     3,     5,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     5,     7,     9,     2,     0,
       1,     1,     3,     0,     3,     4,     2,     2,     0,     1,
       1,     0,     1,     1,     4,     1,     1,     1,     1,     1,
       1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (irtree, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, irtree); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (irtree);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, void* irtree)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, irtree);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, void* irtree)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , irtree);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, irtree); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, void* irtree)
{
  YYUSE (yyvaluep);
  YYUSE (irtree);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void* irtree)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 160 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    { 
            ((IRProgram *)irtree)->setHeaderString(string((yyvsp[-1].token_atrib).texto->c_str()));
        }
#line 1805 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 3:
#line 165 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            ((IRProgram *)irtree)->addOptionList((yyvsp[-2].optlist));
            ((IRProgram *)irtree)->addStatementList((yyvsp[-1].stmntlist));
        }
#line 1814 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 4:
#line 171 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-1].optlist)->push_back((yyvsp[0].iroption));
            (yyval.optlist) = (yyvsp[-1].optlist);
        }
#line 1823 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 5:
#line 176 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.optlist) = new list<IROption *>;
        }
#line 1831 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 6:
#line 181 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iroption) = new FP1IROption((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
        }
#line 1839 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 7:
#line 186 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].stmntlist)->push_back((yyvsp[0].irstatement));
            (yyval.stmntlist) = (yyvsp[-1].stmntlist);
        }
#line 1848 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 8:
#line 191 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.stmntlist) = new list<IRStatement *>;
        }
#line 1856 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 9:
#line 196 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[-1].irinstruction);
        }
#line 1864 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 10:
#line 200 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[-1].irstatement);
        }
#line 1872 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 11:
#line 210 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1880 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 12:
#line 214 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1888 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 13:
#line 219 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1896 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 14:
#line 223 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1904 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 15:
#line 227 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1912 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 16:
#line 231 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1920 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 17:
#line 235 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1928 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 18:
#line 239 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irswzinstr);
        }
#line 1936 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 19:
#line 244 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irinstruction) = (yyvsp[0].irsamplinstr);
        }
#line 1944 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 20:
#line 248 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = (yyvsp[0].irinstruction);
        }
#line 1952 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 21:
#line 254 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 1964 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 22:
#line 263 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1972 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 23:
#line 267 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1980 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 24:
#line 271 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1988 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 25:
#line 275 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 1996 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 26:
#line 279 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2004 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 27:
#line 283 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2012 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 28:
#line 287 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2020 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 29:
#line 291 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2028 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 30:
#line 295 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2036 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 31:
#line 299 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2044 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 32:
#line 305 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-2].irdstoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-3].irinstruction)->getLine());
            (yyvsp[-3].irinstruction)->setDest((yyvsp[-2].irdstoperand));
            (yyvsp[-3].irinstruction)->setSource0((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-3].irinstruction);
        }
#line 2056 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 33:
#line 314 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2064 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 34:
#line 318 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2072 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 35:
#line 322 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2080 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 36:
#line 326 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2088 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 37:
#line 330 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2096 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 38:
#line 334 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2104 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 39:
#line 338 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2112 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 40:
#line 342 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2120 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 41:
#line 346 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2128 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 42:
#line 350 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2136 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 43:
#line 354 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2144 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 44:
#line 358 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2152 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 45:
#line 362 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2160 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 46:
#line 366 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2168 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 47:
#line 372 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2182 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 48:
#line 383 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2190 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 49:
#line 387 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2198 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 50:
#line 393 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-5].irinstruction)->getLine());
            (yyvsp[-5].irinstruction)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irinstruction)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irinstruction)->setSource1((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-5].irinstruction);
        }
#line 2212 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 51:
#line 404 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2220 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 52:
#line 408 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2228 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 53:
#line 412 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2236 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 54:
#line 416 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2244 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 55:
#line 420 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2252 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 56:
#line 424 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2260 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 57:
#line 428 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2268 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 58:
#line 432 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2276 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 59:
#line 436 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2284 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 60:
#line 440 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2292 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 61:
#line 444 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2300 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 62:
#line 448 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2308 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 63:
#line 452 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2316 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 64:
#line 456 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2324 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 65:
#line 460 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2332 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 66:
#line 464 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2340 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 67:
#line 468 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2348 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 68:
#line 472 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2356 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 69:
#line 476 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2364 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 70:
#line 480 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2372 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 71:
#line 484 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2380 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 72:
#line 488 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2388 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 73:
#line 492 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2396 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 74:
#line 496 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2404 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 75:
#line 503 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[-6].irdstoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-4].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[0].irsrcoperand)->setLine((yyvsp[-7].irinstruction)->getLine());
            (yyvsp[-7].irinstruction)->setDest((yyvsp[-6].irdstoperand));
            (yyvsp[-7].irinstruction)->setSource0((yyvsp[-4].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource1((yyvsp[-2].irsrcoperand));
            (yyvsp[-7].irinstruction)->setSource2((yyvsp[0].irsrcoperand));
            (yyval.irinstruction)=(yyvsp[-7].irinstruction);
        }
#line 2420 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 76:
#line 516 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2428 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 77:
#line 520 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2436 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 78:
#line 524 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2444 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 79:
#line 528 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2452 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 80:
#line 532 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2460 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 81:
#line 536 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2468 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 82:
#line 542 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-4].irdstoperand)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[-2].irsrcoperand)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[0].irswzcomps)->setLine((yyvsp[-5].irswzinstr)->getLine());
            (yyvsp[-5].irswzinstr)->setDest((yyvsp[-4].irdstoperand));
            (yyvsp[-5].irswzinstr)->setSource0((yyvsp[-2].irsrcoperand));
            (yyvsp[-5].irswzinstr)->setSwizzleComponents((yyvsp[0].irswzcomps));
            (yyval.irswzinstr) = (yyvsp[-5].irswzinstr);
        }
#line 2482 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 83:
#line 553 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irswzinstr) = new IRSwizzleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2490 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 84:
#line 557 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzinstr) = new IRSwizzleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2498 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 85:
#line 564 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-6].irdstoperand)->setLine((yyvsp[-7].irsamplinstr)->getLine());
            (yyvsp[-4].irsrcoperand)->setLine((yyvsp[-7].irsamplinstr)->getLine());
            (yyvsp[-7].irsamplinstr)->setDest((yyvsp[-6].irdstoperand));
            (yyvsp[-7].irsamplinstr)->setSource0((yyvsp[-4].irsrcoperand));
            (yyvsp[-7].irsamplinstr)->setTextureImageUnit((yyvsp[-2].intconst));
            (yyvsp[-7].irsamplinstr)->setTextureTarget(*(yyvsp[0].str));
            (yyval.irsamplinstr) = (yyvsp[-7].irsamplinstr);
        }
#line 2512 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 86:
#line 575 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2520 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 87:
#line 579 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2528 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 88:
#line 583 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2536 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 89:
#line 587 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2544 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 90:
#line 591 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2552 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 91:
#line 595 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsamplinstr) = new IRSampleInstruction((yyvsp[0].token_atrib).linea,string((yyvsp[0].token_atrib).texto->c_str()));
        }
#line 2560 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 92:
#line 600 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irinstruction) = new IRInstruction((yyvsp[-1].token_atrib).linea,string((yyvsp[-1].token_atrib).texto->c_str()));
            (yyvsp[0].irsrcoperand)->setLine((yyval.irinstruction)->getLine());
            (yyval.irinstruction)->setSource0((yyvsp[0].irsrcoperand));
        }
#line 2570 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 93:
#line 607 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2578 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 94:
#line 612 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2587 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 95:
#line 617 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2596 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 96:
#line 622 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2605 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 97:
#line 627 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2614 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 98:
#line 632 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2623 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 99:
#line 638 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = 0; // Default value of texture when no specified unit number
        }
#line 2631 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 100:
#line 642 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 2639 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 101:
#line 647 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2647 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 102:
#line 656 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2657 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 103:
#line 663 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].boolean)) (yyvsp[-1].irsrcoperand)->setNegateFlag();
            (yyvsp[-1].irsrcoperand)->setSwizzleMask(*(yyvsp[0].str));
            (yyval.irsrcoperand) = (yyvsp[-1].irsrcoperand);
        }
#line 2667 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 104:
#line 670 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irdstoperand)->setWriteMask(*(yyvsp[0].str));
            (yyval.irdstoperand) = (yyvsp[-1].irdstoperand);
        }
#line 2676 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 105:
#line 679 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzcomps) = new IRSwizzleComponents();
            (yyval.irswzcomps)->setComponent(0,(yyvsp[-9].irswzcomp),(yyvsp[-10].boolean));
            (yyval.irswzcomps)->setComponent(1,(yyvsp[-6].irswzcomp),(yyvsp[-7].boolean));
            (yyval.irswzcomps)->setComponent(2,(yyvsp[-3].irswzcomp),(yyvsp[-4].boolean));
            (yyval.irswzcomps)->setComponent(3,(yyvsp[0].irswzcomp),(yyvsp[-1].boolean));
        }
#line 2688 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 106:
#line 688 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[0].intconst)==0) (yyval.irswzcomp) = IRSwizzleComponents::ZERO;
            else (yyval.irswzcomp) = IRSwizzleComponents::ONE;
        }
#line 2697 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 107:
#line 693 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irswzcomp) = (yyvsp[0].irswzcomp);
        }
#line 2705 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 108:
#line 701 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
        }
#line 2713 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 109:
#line 705 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[0].str));
            (yyval.irsrcoperand)->setIsFragmentRegister(true);
        }
#line 2722 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 110:
#line 710 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irsrcoperand) = (yyvsp[0].irsrcoperand);
        }
#line 2730 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 111:
#line 717 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
        }
#line 2738 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 112:
#line 721 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irdstoperand) = new IRDstOperand(*(yyvsp[0].str));
            (yyval.irdstoperand)->setIsFragmentResultRegister(true);
        }
#line 2747 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 113:
#line 727 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(*(yyvsp[-3].str));
            (yyval.irsrcoperand)->setArrayAddressing(new IRArrayAddressing((yyvsp[-1].intconst)));
        }
#line 2756 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 114:
#line 732 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irsrcoperand) = new IRSrcOperand(string(""));
            (yyval.irsrcoperand)->setParamBinding((yyvsp[0].irparambind));
        }
#line 2765 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 115:
#line 738 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2773 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 116:
#line 743 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2781 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 117:
#line 748 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str)= (yyvsp[0].str);
        }
#line 2789 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 118:
#line 753 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),"xyzw"); 
            //$$ = new string("xyzw");
        }
#line 2798 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 119:
#line 758 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2806 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 120:
#line 765 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            if (!(yyvsp[0].str)->compare("x")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("y")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("z")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("w")) (yyval.irswzcomp) = IRSwizzleComponents::W;
            else if (!(yyvsp[0].str)->compare("r")) (yyval.irswzcomp) = IRSwizzleComponents::X;
            else if (!(yyvsp[0].str)->compare("g")) (yyval.irswzcomp) = IRSwizzleComponents::Y;
            else if (!(yyvsp[0].str)->compare("b")) (yyval.irswzcomp) = IRSwizzleComponents::Z;
            else if (!(yyvsp[0].str)->compare("a")) (yyval.irswzcomp) = IRSwizzleComponents::W;
        }
#line 2821 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 121:
#line 777 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),"xyzw"); //$$ = new string("xyzw");
        }
#line 2829 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 122:
#line 781 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2837 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 123:
#line 807 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2845 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 124:
#line 817 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irattrstmnt);
        }
#line 2853 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 125:
#line 821 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irparamstmnt);
        }
#line 2861 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 126:
#line 825 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].irtempstmnt);
        }
#line 2869 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 127:
#line 829 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].iroutputstmnt);
        }
#line 2877 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 128:
#line 833 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irstatement) = (yyvsp[0].iraliasstmnt);
        }
#line 2885 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 129:
#line 839 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irattrstmnt) = new FP1IRATTRIBStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.irattrstmnt)->setInputAttribute(*(yyvsp[0].str));
        }
#line 2894 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 130:
#line 845 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 2902 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 131:
#line 850 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 2913 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 132:
#line 857 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 2924 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 133:
#line 864 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2933 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 134:
#line 869 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 2942 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 135:
#line 874 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 2953 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 136:
#line 882 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 2961 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 137:
#line 889 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 2969 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 138:
#line 893 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparamstmnt) = (yyvsp[0].irparamstmnt);
        }
#line 2977 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 139:
#line 898 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str),false);
            (yyval.irparamstmnt)->setSize(-1);
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 2987 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 140:
#line 906 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparamstmnt) = new IRPARAMStatement((yyvsp[-5].token_atrib).linea,*(yyvsp[-4].str),true);
            (yyval.irparamstmnt)->setSize((yyvsp[-2].intconst));
            (yyval.irparamstmnt)->setParamBindings((yyvsp[0].pbindlist));
        }
#line 2997 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 141:
#line 913 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = -1; // It means that no optional size is specified
        }
#line 3005 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 142:
#line 920 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3013 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 143:
#line 925 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = new list<IRParamBinding *>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 3022 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 144:
#line 931 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = (yyvsp[-1].pbindlist);
        }
#line 3030 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 145:
#line 936 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.pbindlist) = new list<IRParamBinding *>;
            (yyval.pbindlist)->push_back((yyvsp[0].irparambind));
        }
#line 3039 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 146:
#line 941 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-2].pbindlist)->push_back((yyvsp[0].irparambind));
            (yyval.pbindlist) = (yyvsp[-2].pbindlist);
        }
#line 3048 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 147:
#line 947 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3056 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 148:
#line 951 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3064 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 149:
#line 955 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3072 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 150:
#line 960 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3081 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 151:
#line 965 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3090 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 152:
#line 970 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[0].irparambind)->setIsImplicitBinding(true);
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3099 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 153:
#line 976 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3107 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 154:
#line 980 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3115 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 155:
#line 984 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3123 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 156:
#line 989 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3131 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 157:
#line 993 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 3139 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 158:
#line 998 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3147 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 159:
#line 1002 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3155 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 160:
#line 1006 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3163 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 161:
#line 1010 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3171 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 162:
#line 1014 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3179 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 163:
#line 1018 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3187 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 164:
#line 1022 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str));
        }
#line 3195 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 165:
#line 1026 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRStateBinding(*(yyvsp[0].str),true);
        }
#line 3203 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 166:
#line 1031 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3215 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 167:
#line 1040 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3224 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 168:
#line 1045 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3233 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 169:
#line 1050 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3242 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 170:
#line 1055 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3251 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 171:
#line 1060 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3260 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 172:
#line 1066 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-4].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-2].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3272 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 173:
#line 1075 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3281 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 174:
#line 1080 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3290 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 175:
#line 1085 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3299 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 176:
#line 1090 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3308 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 177:
#line 1095 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3317 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 178:
#line 1100 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3328 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 179:
#line 1107 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3337 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 180:
#line 1113 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3346 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 181:
#line 1119 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3357 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 182:
#line 1127 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3366 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 183:
#line 1132 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*((yyvsp[0].token_atrib).texto))
        }
#line 3377 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 184:
#line 1141 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-5].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-3].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[-1].str))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3390 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 185:
#line 1151 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3399 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 186:
#line 1156 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3408 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 187:
#line 1161 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3417 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 188:
#line 1167 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3425 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 189:
#line 1172 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-2].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
            APPEND_STR(*(yyval.str),*(yyvsp[0].str))
        }
#line 3437 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 190:
#line 1181 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3446 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 191:
#line 1187 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 3454 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 192:
#line 1191 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3462 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 193:
#line 1196 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3470 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 194:
#line 1201 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto));
            APPEND_STR(*(yyval.str),*(yyvsp[0].str));
        }
#line 3481 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 195:
#line 1209 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3490 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 196:
#line 1214 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3499 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 197:
#line 1220 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),*((yyvsp[-1].token_atrib).texto));
            APPEND_STR(*(yyval.str),*(yyvsp[0].str));
        }
#line 3510 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 198:
#line 1228 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3519 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 199:
#line 1234 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-4].str))
            APPEND_STR(*(yyval.str),".row")
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3531 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 200:
#line 1243 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *(yyvsp[-1].str))
            APPEND_STR(*(yyval.str), *(yyvsp[0].str))
        }
#line 3542 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 201:
#line 1251 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),".row[0..3]"); 
            //$$ = new string(".row[0..3]");
        }
#line 3551 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 202:
#line 1256 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str),".row[")
            APPEND_ROW_RANGE_SELECTION(*(yyval.str),(yyvsp[-3].intconst),(yyvsp[-1].intconst))
        }
#line 3562 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 203:
#line 1264 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-2].token_atrib).texto))
            APPEND_STR(*(yyval.str), *(yyvsp[-1].str))
            APPEND_STR(*(yyval.str), *(yyvsp[0].str))
        }
#line 3574 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 204:
#line 1273 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),".normal"); 
            //$$ = new string(".normal");
        }
#line 3583 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 205:
#line 1278 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 3591 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 206:
#line 1283 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3600 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 207:
#line 1288 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3609 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 208:
#line 1293 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3618 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 209:
#line 1299 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3626 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 210:
#line 1304 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3637 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 211:
#line 1311 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3646 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 212:
#line 1316 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 3655 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 213:
#line 1321 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-1].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[0].intconst))
        }
#line 3666 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 214:
#line 1328 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-3].token_atrib).texto))
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst))
        }
#line 3677 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 215:
#line 1335 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_EMPTY_STRING((yyval.str)); 
            //$$ = new string;
            APPEND_STR(*(yyval.str), *((yyvsp[-3].token_atrib).texto));
            APPEND_NUMBER_SELECTION(*(yyval.str),(yyvsp[-1].intconst));
        }
#line 3688 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 216:
#line 1343 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 3696 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 217:
#line 1347 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3704 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 218:
#line 1352 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3712 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 219:
#line 1357 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = 0; // Default value
        }
#line 3720 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 220:
#line 1361 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.intconst) = (yyvsp[-1].intconst);
        }
#line 3728 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 221:
#line 1366 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3736 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 222:
#line 1371 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3744 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 223:
#line 1376 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3752 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 224:
#line 1381 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 3760 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 225:
#line 1385 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irlocalenvbind);
        }
#line 3768 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 226:
#line 1390 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3776 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 227:
#line 1394 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3784 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 228:
#line 1399 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 3793 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 229:
#line 1405 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 3802 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 230:
#line 1410 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 3811 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 231:
#line 1416 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::ENVPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 3821 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 232:
#line 1423 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-1].irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irparambind) = (yyvsp[-1].irlocalenvbind);
        }
#line 3830 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 233:
#line 1429 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[0].intconst),(yyvsp[0].intconst));
        }
#line 3839 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 234:
#line 1434 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-2].intconst),(yyvsp[0].intconst));
        }
#line 3848 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 235:
#line 1440 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irlocalenvbind) = new IRLocalEnvBinding(IRLocalEnvBinding::LOCALPARAM);
            (yyval.irlocalenvbind)->setLine((yyvsp[-4].token_atrib).linea);
            (yyval.irlocalenvbind)->setIndices((yyvsp[-1].intconst),(yyvsp[-1].intconst));
        }
#line 3858 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 236:
#line 1447 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3866 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 237:
#line 1452 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.intconst) = (yyvsp[0].intconst);
        }
#line 3874 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 238:
#line 1457 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3882 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 239:
#line 1461 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3890 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 240:
#line 1466 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3898 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 241:
#line 1470 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = (yyvsp[0].irparambind);
        }
#line 3906 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 242:
#line 1475 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),0.0f,0.0f,0.0f,true);
        }
#line 3914 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 243:
#line 1480 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),(yyvsp[0].floatconst),true);
        }
#line 3922 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 244:
#line 1485 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-1].floatconst),0.0f,0.0f,1.0f);
        }
#line 3930 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 245:
#line 1490 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-3].floatconst),(yyvsp[-1].floatconst),0.0f,1.0f);
        }
#line 3938 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 246:
#line 1496 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst),1.0f);
        }
#line 3946 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 247:
#line 1503 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irparambind) = new IRConstantBinding((yyvsp[-7].floatconst),(yyvsp[-5].floatconst),(yyvsp[-3].floatconst),(yyvsp[-1].floatconst));
        }
#line 3954 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 248:
#line 1508 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].boolean)) (yyval.floatconst) = (-1)*(yyvsp[0].floatconst);
            else (yyval.floatconst) = (yyvsp[0].floatconst);
        }
#line 3963 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 249:
#line 1514 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = false;
        }
#line 3971 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 250:
#line 1518 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = true;
        }
#line 3979 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 251:
#line 1522 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.boolean) = false;
        }
#line 3987 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 252:
#line 1527 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.irtempstmnt) = new IRTEMPStatement((yyvsp[-2].token_atrib).linea,*(yyvsp[-1].str));
            (yyval.irtempstmnt)->setOtherTemporaries((yyvsp[0].strlist));
        }
#line 3996 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 253:
#line 1533 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.strlist) = new list<string>();
        }
#line 4004 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 254:
#line 1537 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyvsp[-2].strlist)->push_back(*(yyvsp[0].str));
            (yyval.strlist) = (yyvsp[-2].strlist);
        }
#line 4013 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 255:
#line 1544 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iroutputstmnt) = new FP1IROUTPUTStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iroutputstmnt)->setOutputAttribute(*(yyvsp[0].str));
        }
#line 4022 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 256:
#line 1550 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 4031 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 257:
#line 1555 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($2.texto));
        }
#line 4040 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 258:
#line 1561 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),".front"); 
            //$$ = new string(".front"); // Default
        }
#line 4049 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 259:
#line 1566 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4058 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 260:
#line 1571 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4067 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 261:
#line 1577 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),".primary"); 
            //$$ = new string(".primary"); // Default
        }
#line 4076 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 262:
#line 1582 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4085 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 263:
#line 1587 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4094 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 264:
#line 1594 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.iraliasstmnt) = new IRALIASStatement((yyvsp[-3].token_atrib).linea,*(yyvsp[-2].str));
            (yyval.iraliasstmnt)->setAlias(*(yyvsp[0].str));
        }
#line 4103 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 265:
#line 1600 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {   
            (yyval.str) = (yyvsp[0].str);
        }
#line 4111 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 266:
#line 1605 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            (yyval.str) = (yyvsp[0].str);
        }
#line 4119 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 267:
#line 1610 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),*((yyvsp[0].token_atrib).texto)); 
            //$$ = new string(*($1.texto));
        }
#line 4128 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 268:
#line 1616 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            CREATE_STRING((yyval.str),&((yyvsp[0].token_atrib).texto->c_str()[1])); 
            //$$ = new string(&($1.texto->c_str()[1]));
        }
#line 4137 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 269:
#line 1622 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.intconst))
        }
#line 4145 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 270:
#line 1627 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 4153 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;

  case 271:
#line 1631 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1646  */
    {
            STRING_TO_VAR(*((yyvsp[0].token_atrib).texto), (yyval.floatconst))
        }
#line 4161 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
    break;


#line 4165 "ARBP/FragmentProgram/FP1Bison.gen" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (irtree, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (irtree, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, irtree);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, irtree);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (irtree, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, irtree);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, irtree);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 1635 "ARBP/FragmentProgram/FP1Grammar.y" /* yacc.c:1906  */


#include "FP1Flex.gen" 

int fp1StartParse(void *ptr)
{
    yyparse(ptr);
    
    list<string*>::iterator iter = fp1LexSymbolCollector.begin();
    
    while(iter != fp1LexSymbolCollector.end())
    {
        delete (*iter);
        iter++;
    }
    
    fp1LexSymbolCollector.clear();

    iter = fp1ASTStringCollector.begin();
    
    while(iter != fp1ASTStringCollector.end())
    {   
        delete (*iter);
        iter++;
    }
    
    fp1ASTStringCollector.clear();
    
    return 0;
}
