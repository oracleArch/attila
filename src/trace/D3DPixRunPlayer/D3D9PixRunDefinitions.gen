void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3D9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3D9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3D9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_ADDREF() {

#ifdef D3D9OP_IDIRECT3D9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3D9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3D9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3D9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_ADDREF_USER_PRE
D3D9OP_IDIRECT3D9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3D9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3D9_ADDREF_USER_POST
D3D9OP_IDIRECT3D9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3D9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_RELEASE() {

#ifdef D3D9OP_IDIRECT3D9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3D9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3D9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3D9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_RELEASE_USER_PRE
D3D9OP_IDIRECT3D9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3D9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3D9_RELEASE_USER_POST
D3D9OP_IDIRECT3D9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE() {

#ifdef D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_USER_PRE
D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_USER_POST
D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_REGISTERSOFTWAREDEVICE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETADAPTERCOUNT() {

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETADAPTERCOUNT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_USER_PRE
D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_USER_POST
D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETADAPTERCOUNT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER() {

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_USER_PRE
D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_USER_POST
D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETADAPTERIDENTIFIER_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT() {

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_USER_PRE
D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_USER_POST
D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETADAPTERMODECOUNT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_ENUMADAPTERMODES() {

#ifdef D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_ENUMADAPTERMODES", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_USER_PRE
D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_USER_POST
D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_SPECIFIC_POST
D3D9OP_IDIRECT3D9_ENUMADAPTERMODES_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE() {

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_USER_PRE
D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_USER_POST
D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETADAPTERDISPLAYMODE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CHECKDEVICETYPE() {

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CHECKDEVICETYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_USER_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_USER_POST
D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CHECKDEVICETYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT() {

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_USER_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_USER_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMAT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE() {

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_USER_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_USER_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEMULTISAMPLETYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH() {

#ifdef D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_USER_PRE
D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_USER_POST
D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CHECKDEPTHSTENCILMATCH_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION() {

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_USER_PRE
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_USER_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CHECKDEVICEFORMATCONVERSION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETDEVICECAPS() {

#ifdef D3D9OP_IDIRECT3D9_GETDEVICECAPS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETDEVICECAPS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETDEVICECAPS_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETDEVICECAPS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETDEVICECAPS_USER_PRE
D3D9OP_IDIRECT3D9_GETDEVICECAPS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETDEVICECAPS_USER_POST
D3D9OP_IDIRECT3D9_GETDEVICECAPS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETDEVICECAPS_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETDEVICECAPS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_GETADAPTERMONITOR() {

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_GETADAPTERMONITOR", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_USER_PRE
D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_USER_POST
D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_SPECIFIC_POST
D3D9OP_IDIRECT3D9_GETADAPTERMONITOR_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3D9_CREATEDEVICE() {

#ifdef D3D9OP_IDIRECT3D9_CREATEDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CREATEDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3D9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3D9 *>(status.getSubstitute(oip_This));

UINT ov_Adapter;
UINT sv_Adapter;
reader.readParameter<UINT>(&ov_Adapter);
sv_Adapter = ov_Adapter;

D3DDEVTYPE ov_DeviceType;
D3DDEVTYPE sv_DeviceType;
reader.readParameter<D3DDEVTYPE>(&ov_DeviceType);
sv_DeviceType = ov_DeviceType;

PIXPointer ov_hFocusWindow;
HWND sv_hFocusWindow;
reader.readParameter<PIXPointer>(&ov_hFocusWindow);
sv_hFocusWindow = (HWND) pointer(ov_hFocusWindow);

PIXPointer ov_BehaviorFlags;
DWORD sv_BehaviorFlags;
reader.readParameter<PIXPointer>(&ov_BehaviorFlags);
sv_BehaviorFlags = (DWORD) pointer(ov_BehaviorFlags);

PIXPointer opv_pPresentationParameters;
D3DPRESENT_PARAMETERS ov_pPresentationParameters;
D3DPRESENT_PARAMETERS* spv_pPresentationParameters;
D3DPRESENT_PARAMETERS sv_pPresentationParameters;
reader.readParameter<PIXPointer>(&opv_pPresentationParameters);
reader.readParameter<D3DPRESENT_PARAMETERS>(&ov_pPresentationParameters);
spv_pPresentationParameters = (opv_pPresentationParameters == 0 ) ? 0: &sv_pPresentationParameters;
sv_pPresentationParameters = ov_pPresentationParameters;

PIXPointer opip_ppReturnedDeviceInterface;
PIXPointer oip_ppReturnedDeviceInterface;
IDirect3DDevice9** spip_ppReturnedDeviceInterface;
IDirect3DDevice9* sip_ppReturnedDeviceInterface;
reader.readParameter<PIXPointer>(&opip_ppReturnedDeviceInterface);
reader.readParameter<PIXPointer>(&oip_ppReturnedDeviceInterface);
spip_ppReturnedDeviceInterface = &sip_ppReturnedDeviceInterface;

#ifdef D3D9OP_IDIRECT3D9_CREATEDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3D9_CREATEDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3D9_CREATEDEVICE_USER_PRE
D3D9OP_IDIRECT3D9_CREATEDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3D9_CREATEDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3D9_CREATEDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateDevice(
sv_Adapter ,sv_DeviceType ,sv_hFocusWindow ,sv_BehaviorFlags ,spv_pPresentationParameters ,spip_ppReturnedDeviceInterface);

#ifdef D3D9OP_IDIRECT3D9_CREATEDEVICE_USER_POST
D3D9OP_IDIRECT3D9_CREATEDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3D9_CREATEDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3D9_CREATEDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3D9_CREATEDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppReturnedDeviceInterface, sip_ppReturnedDeviceInterface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_ADDREF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_RELEASE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_USER_POST
D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_TESTCOOPERATIVELEVEL_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETAVAILABLETEXTUREMEM_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> EvictManagedResources(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_EVICTMANAGEDRESOURCES didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppD3D9;
PIXPointer oip_ppD3D9;
IDirect3D9** spip_ppD3D9;
IDirect3D9* sip_ppD3D9;
reader.readParameter<PIXPointer>(&opip_ppD3D9);
reader.readParameter<PIXPointer>(&oip_ppD3D9);
spip_ppD3D9 = &sip_ppD3D9;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDirect3D(
spip_ppD3D9);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETDIRECT3D didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppD3D9, sip_ppD3D9);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETDEVICECAPS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETDISPLAYMODE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETCREATIONPARAMETERS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_XHotSpot;
UINT sv_XHotSpot;
reader.readParameter<UINT>(&ov_XHotSpot);
sv_XHotSpot = ov_XHotSpot;

UINT ov_YHotSpot;
UINT sv_YHotSpot;
reader.readParameter<UINT>(&ov_YHotSpot);
sv_YHotSpot = ov_YHotSpot;

PIXPointer oip_pCursorBitmap;
IDirect3DSurface9* sip_pCursorBitmap;
reader.readParameter<PIXPointer>(&oip_pCursorBitmap);
sip_pCursorBitmap = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pCursorBitmap));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetCursorProperties(
sv_XHotSpot ,sv_YHotSpot ,sip_pCursorBitmap);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETCURSORPROPERTIES didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

int ov_X;
int sv_X;
reader.readParameter<int>(&ov_X);
sv_X = ov_X;

int ov_Y;
int sv_Y;
reader.readParameter<int>(&ov_Y);
sv_Y = ov_Y;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> SetCursorPosition(
sv_X ,sv_Y ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURSORPOSITION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR", "Not supported D3D9 call found in trace file.");
#endif

BOOL ov_Return;
BOOL sv_Return;
reader.readParameter<BOOL>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

BOOL ov_bShow;
BOOL sv_bShow;
reader.readParameter<BOOL>(&ov_bShow);
sv_bShow = ov_bShow;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> ShowCursor(
sv_bShow);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SHOWCURSOR_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pPresentationParameters;
D3DPRESENT_PARAMETERS ov_pPresentationParameters;
D3DPRESENT_PARAMETERS* spv_pPresentationParameters;
D3DPRESENT_PARAMETERS sv_pPresentationParameters;
reader.readParameter<PIXPointer>(&opv_pPresentationParameters);
reader.readParameter<D3DPRESENT_PARAMETERS>(&ov_pPresentationParameters);
spv_pPresentationParameters = (opv_pPresentationParameters == 0 ) ? 0: &sv_pPresentationParameters;
sv_pPresentationParameters = ov_pPresentationParameters;

PIXPointer opip_pSwapChain;
PIXPointer oip_pSwapChain;
IDirect3DSwapChain9** spip_pSwapChain;
IDirect3DSwapChain9* sip_pSwapChain;
reader.readParameter<PIXPointer>(&opip_pSwapChain);
reader.readParameter<PIXPointer>(&oip_pSwapChain);
spip_pSwapChain = &sip_pSwapChain;

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateAdditionalSwapChain(
spv_pPresentationParameters ,spip_pSwapChain);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEADDITIONALSWAPCHAIN didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_pSwapChain, sip_pSwapChain);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_iSwapChain;
UINT sv_iSwapChain;
reader.readParameter<UINT>(&ov_iSwapChain);
sv_iSwapChain = ov_iSwapChain;

PIXPointer opip_pSwapChain;
PIXPointer oip_pSwapChain;
IDirect3DSwapChain9** spip_pSwapChain;
IDirect3DSwapChain9* sip_pSwapChain;
reader.readParameter<PIXPointer>(&opip_pSwapChain);
reader.readParameter<PIXPointer>(&oip_pSwapChain);
spip_pSwapChain = &sip_pSwapChain;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetSwapChain(
sv_iSwapChain ,spip_pSwapChain);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETSWAPCHAIN didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_pSwapChain, sip_pSwapChain);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETNUMBEROFSWAPCHAINS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_RESET() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_RESET_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_RESET", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pPresentationParameters;
D3DPRESENT_PARAMETERS ov_pPresentationParameters;
D3DPRESENT_PARAMETERS* spv_pPresentationParameters;
D3DPRESENT_PARAMETERS sv_pPresentationParameters;
reader.readParameter<PIXPointer>(&opv_pPresentationParameters);
reader.readParameter<D3DPRESENT_PARAMETERS>(&ov_pPresentationParameters);
spv_pPresentationParameters = (opv_pPresentationParameters == 0 ) ? 0: &sv_pPresentationParameters;
sv_pPresentationParameters = ov_pPresentationParameters;

#ifdef D3D9OP_IDIRECT3DDEVICE9_RESET_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_RESET_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_RESET_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_RESET_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_RESET interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_RESET", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Reset(
spv_pPresentationParameters);

#ifdef D3D9OP_IDIRECT3DDEVICE9_RESET_USER_POST
D3D9OP_IDIRECT3DDEVICE9_RESET_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_RESET_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_RESET_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_RESET didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_PRESENT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_PRESENT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_PRESENT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pSourceRect;
 RECT ov_pSourceRect;
 RECT* spv_pSourceRect;
 RECT sv_pSourceRect;
reader.readParameter<PIXPointer>(&opv_pSourceRect);
reader.readParameter< RECT>(&ov_pSourceRect);
spv_pSourceRect = (opv_pSourceRect == 0 ) ? 0: &sv_pSourceRect;
sv_pSourceRect = ov_pSourceRect;

PIXPointer opv_pDestRect;
 RECT ov_pDestRect;
 RECT* spv_pDestRect;
 RECT sv_pDestRect;
reader.readParameter<PIXPointer>(&opv_pDestRect);
reader.readParameter< RECT>(&ov_pDestRect);
spv_pDestRect = (opv_pDestRect == 0 ) ? 0: &sv_pDestRect;
sv_pDestRect = ov_pDestRect;

PIXPointer ov_hDestWindowOverride;
HWND sv_hDestWindowOverride;
reader.readParameter<PIXPointer>(&ov_hDestWindowOverride);
sv_hDestWindowOverride = (HWND) pointer(ov_hDestWindowOverride);

PIXPointer ov_pDirtyRegion;
 RGNDATA* sv_pDirtyRegion;
reader.readParameter<PIXPointer>(&ov_pDirtyRegion);
sv_pDirtyRegion = ( RGNDATA*) pointer(ov_pDirtyRegion);

#ifdef D3D9OP_IDIRECT3DDEVICE9_PRESENT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_PRESENT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_PRESENT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_PRESENT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_PRESENT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_PRESENT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Present(
spv_pSourceRect ,spv_pDestRect ,sv_hDestWindowOverride ,sv_pDirtyRegion);

#ifdef D3D9OP_IDIRECT3DDEVICE9_PRESENT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_PRESENT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_PRESENT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_PRESENT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_PRESENT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_iSwapChain;
UINT sv_iSwapChain;
reader.readParameter<UINT>(&ov_iSwapChain);
sv_iSwapChain = ov_iSwapChain;

UINT ov_iBackBuffer;
UINT sv_iBackBuffer;
reader.readParameter<UINT>(&ov_iBackBuffer);
sv_iBackBuffer = ov_iBackBuffer;

D3DBACKBUFFER_TYPE ov_Type;
D3DBACKBUFFER_TYPE sv_Type;
reader.readParameter<D3DBACKBUFFER_TYPE>(&ov_Type);
sv_Type = ov_Type;

PIXPointer opip_ppBackBuffer;
PIXPointer oip_ppBackBuffer;
IDirect3DSurface9** spip_ppBackBuffer;
IDirect3DSurface9* sip_ppBackBuffer;
reader.readParameter<PIXPointer>(&opip_ppBackBuffer);
reader.readParameter<PIXPointer>(&oip_ppBackBuffer);
spip_ppBackBuffer = &sip_ppBackBuffer;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetBackBuffer(
sv_iSwapChain ,sv_iBackBuffer ,sv_Type ,spip_ppBackBuffer);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETBACKBUFFER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppBackBuffer, sip_ppBackBuffer);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETRASTERSTATUS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

BOOL ov_bEnableDialogs;
BOOL sv_bEnableDialogs;
reader.readParameter<BOOL>(&ov_bEnableDialogs);
sv_bEnableDialogs = ov_bEnableDialogs;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetDialogBoxMode(
sv_bEnableDialogs);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETDIALOGBOXMODE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_iSwapChain;
UINT sv_iSwapChain;
reader.readParameter<UINT>(&ov_iSwapChain);
sv_iSwapChain = ov_iSwapChain;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

PIXPointer opv_pRamp;
 D3DGAMMARAMP ov_pRamp;
 D3DGAMMARAMP* spv_pRamp;
 D3DGAMMARAMP sv_pRamp;
reader.readParameter<PIXPointer>(&opv_pRamp);
reader.readParameter< D3DGAMMARAMP>(&ov_pRamp);
spv_pRamp = (opv_pRamp == 0 ) ? 0: &sv_pRamp;
sv_pRamp = ov_pRamp;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> SetGammaRamp(
sv_iSwapChain ,sv_Flags ,spv_pRamp);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETGAMMARAMP_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETGAMMARAMP_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Width;
UINT sv_Width;
reader.readParameter<UINT>(&ov_Width);
sv_Width = ov_Width;

UINT ov_Height;
UINT sv_Height;
reader.readParameter<UINT>(&ov_Height);
sv_Height = ov_Height;

UINT ov_Levels;
UINT sv_Levels;
reader.readParameter<UINT>(&ov_Levels);
sv_Levels = ov_Levels;

PIXPointer ov_Usage;
DWORD sv_Usage;
reader.readParameter<PIXPointer>(&ov_Usage);
sv_Usage = (DWORD) pointer(ov_Usage);

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppTexture;
PIXPointer oip_ppTexture;
IDirect3DTexture9** spip_ppTexture;
IDirect3DTexture9* sip_ppTexture;
reader.readParameter<PIXPointer>(&opip_ppTexture);
reader.readParameter<PIXPointer>(&oip_ppTexture);
spip_ppTexture = &sip_ppTexture;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateTexture(
sv_Width ,sv_Height ,sv_Levels ,sv_Usage ,sv_Format ,sv_Pool ,spip_ppTexture ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATETEXTURE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppTexture, sip_ppTexture);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Width;
UINT sv_Width;
reader.readParameter<UINT>(&ov_Width);
sv_Width = ov_Width;

UINT ov_Height;
UINT sv_Height;
reader.readParameter<UINT>(&ov_Height);
sv_Height = ov_Height;

UINT ov_Depth;
UINT sv_Depth;
reader.readParameter<UINT>(&ov_Depth);
sv_Depth = ov_Depth;

UINT ov_Levels;
UINT sv_Levels;
reader.readParameter<UINT>(&ov_Levels);
sv_Levels = ov_Levels;

PIXPointer ov_Usage;
DWORD sv_Usage;
reader.readParameter<PIXPointer>(&ov_Usage);
sv_Usage = (DWORD) pointer(ov_Usage);

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppVolumeTexture;
PIXPointer oip_ppVolumeTexture;
IDirect3DVolumeTexture9** spip_ppVolumeTexture;
IDirect3DVolumeTexture9* sip_ppVolumeTexture;
reader.readParameter<PIXPointer>(&opip_ppVolumeTexture);
reader.readParameter<PIXPointer>(&oip_ppVolumeTexture);
spip_ppVolumeTexture = &sip_ppVolumeTexture;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateVolumeTexture(
sv_Width ,sv_Height ,sv_Depth ,sv_Levels ,sv_Usage ,sv_Format ,sv_Pool ,spip_ppVolumeTexture ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEVOLUMETEXTURE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppVolumeTexture, sip_ppVolumeTexture);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_EdgeLength;
UINT sv_EdgeLength;
reader.readParameter<UINT>(&ov_EdgeLength);
sv_EdgeLength = ov_EdgeLength;

UINT ov_Levels;
UINT sv_Levels;
reader.readParameter<UINT>(&ov_Levels);
sv_Levels = ov_Levels;

PIXPointer ov_Usage;
DWORD sv_Usage;
reader.readParameter<PIXPointer>(&ov_Usage);
sv_Usage = (DWORD) pointer(ov_Usage);

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppCubeTexture;
PIXPointer oip_ppCubeTexture;
IDirect3DCubeTexture9** spip_ppCubeTexture;
IDirect3DCubeTexture9* sip_ppCubeTexture;
reader.readParameter<PIXPointer>(&opip_ppCubeTexture);
reader.readParameter<PIXPointer>(&oip_ppCubeTexture);
spip_ppCubeTexture = &sip_ppCubeTexture;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateCubeTexture(
sv_EdgeLength ,sv_Levels ,sv_Usage ,sv_Format ,sv_Pool ,spip_ppCubeTexture ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATECUBETEXTURE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppCubeTexture, sip_ppCubeTexture);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Length;
UINT sv_Length;
reader.readParameter<UINT>(&ov_Length);
sv_Length = ov_Length;

PIXPointer ov_Usage;
DWORD sv_Usage;
reader.readParameter<PIXPointer>(&ov_Usage);
sv_Usage = (DWORD) pointer(ov_Usage);

PIXPointer ov_FVF;
DWORD sv_FVF;
reader.readParameter<PIXPointer>(&ov_FVF);
sv_FVF = (DWORD) pointer(ov_FVF);

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppVertexBuffer;
PIXPointer oip_ppVertexBuffer;
IDirect3DVertexBuffer9** spip_ppVertexBuffer;
IDirect3DVertexBuffer9* sip_ppVertexBuffer;
reader.readParameter<PIXPointer>(&opip_ppVertexBuffer);
reader.readParameter<PIXPointer>(&oip_ppVertexBuffer);
spip_ppVertexBuffer = &sip_ppVertexBuffer;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateVertexBuffer(
sv_Length ,sv_Usage ,sv_FVF ,sv_Pool ,spip_ppVertexBuffer ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXBUFFER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppVertexBuffer, sip_ppVertexBuffer);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Length;
UINT sv_Length;
reader.readParameter<UINT>(&ov_Length);
sv_Length = ov_Length;

PIXPointer ov_Usage;
DWORD sv_Usage;
reader.readParameter<PIXPointer>(&ov_Usage);
sv_Usage = (DWORD) pointer(ov_Usage);

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppIndexBuffer;
PIXPointer oip_ppIndexBuffer;
IDirect3DIndexBuffer9** spip_ppIndexBuffer;
IDirect3DIndexBuffer9* sip_ppIndexBuffer;
reader.readParameter<PIXPointer>(&opip_ppIndexBuffer);
reader.readParameter<PIXPointer>(&oip_ppIndexBuffer);
spip_ppIndexBuffer = &sip_ppIndexBuffer;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateIndexBuffer(
sv_Length ,sv_Usage ,sv_Format ,sv_Pool ,spip_ppIndexBuffer ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEINDEXBUFFER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppIndexBuffer, sip_ppIndexBuffer);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Width;
UINT sv_Width;
reader.readParameter<UINT>(&ov_Width);
sv_Width = ov_Width;

UINT ov_Height;
UINT sv_Height;
reader.readParameter<UINT>(&ov_Height);
sv_Height = ov_Height;

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DMULTISAMPLE_TYPE ov_MultiSample;
D3DMULTISAMPLE_TYPE sv_MultiSample;
reader.readParameter<D3DMULTISAMPLE_TYPE>(&ov_MultiSample);
sv_MultiSample = ov_MultiSample;

PIXPointer ov_MultisampleQuality;
DWORD sv_MultisampleQuality;
reader.readParameter<PIXPointer>(&ov_MultisampleQuality);
sv_MultisampleQuality = (DWORD) pointer(ov_MultisampleQuality);

BOOL ov_Lockable;
BOOL sv_Lockable;
reader.readParameter<BOOL>(&ov_Lockable);
sv_Lockable = ov_Lockable;

PIXPointer opip_ppSurface;
PIXPointer oip_ppSurface;
IDirect3DSurface9** spip_ppSurface;
IDirect3DSurface9* sip_ppSurface;
reader.readParameter<PIXPointer>(&opip_ppSurface);
reader.readParameter<PIXPointer>(&oip_ppSurface);
spip_ppSurface = &sip_ppSurface;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateRenderTarget(
sv_Width ,sv_Height ,sv_Format ,sv_MultiSample ,sv_MultisampleQuality ,sv_Lockable ,spip_ppSurface ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATERENDERTARGET didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSurface, sip_ppSurface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Width;
UINT sv_Width;
reader.readParameter<UINT>(&ov_Width);
sv_Width = ov_Width;

UINT ov_Height;
UINT sv_Height;
reader.readParameter<UINT>(&ov_Height);
sv_Height = ov_Height;

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DMULTISAMPLE_TYPE ov_MultiSample;
D3DMULTISAMPLE_TYPE sv_MultiSample;
reader.readParameter<D3DMULTISAMPLE_TYPE>(&ov_MultiSample);
sv_MultiSample = ov_MultiSample;

PIXPointer ov_MultisampleQuality;
DWORD sv_MultisampleQuality;
reader.readParameter<PIXPointer>(&ov_MultisampleQuality);
sv_MultisampleQuality = (DWORD) pointer(ov_MultisampleQuality);

BOOL ov_Discard;
BOOL sv_Discard;
reader.readParameter<BOOL>(&ov_Discard);
sv_Discard = ov_Discard;

PIXPointer opip_ppSurface;
PIXPointer oip_ppSurface;
IDirect3DSurface9** spip_ppSurface;
IDirect3DSurface9* sip_ppSurface;
reader.readParameter<PIXPointer>(&opip_ppSurface);
reader.readParameter<PIXPointer>(&oip_ppSurface);
spip_ppSurface = &sip_ppSurface;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateDepthStencilSurface(
sv_Width ,sv_Height ,sv_Format ,sv_MultiSample ,sv_MultisampleQuality ,sv_Discard ,spip_ppSurface ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEDEPTHSTENCILSURFACE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSurface, sip_ppSurface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pSourceSurface;
IDirect3DSurface9* sip_pSourceSurface;
reader.readParameter<PIXPointer>(&oip_pSourceSurface);
sip_pSourceSurface = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pSourceSurface));

PIXPointer opv_pSourceRect;
 RECT ov_pSourceRect;
 RECT* spv_pSourceRect;
 RECT sv_pSourceRect;
reader.readParameter<PIXPointer>(&opv_pSourceRect);
reader.readParameter< RECT>(&ov_pSourceRect);
spv_pSourceRect = (opv_pSourceRect == 0 ) ? 0: &sv_pSourceRect;
sv_pSourceRect = ov_pSourceRect;

PIXPointer oip_pDestinationSurface;
IDirect3DSurface9* sip_pDestinationSurface;
reader.readParameter<PIXPointer>(&oip_pDestinationSurface);
sip_pDestinationSurface = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pDestinationSurface));

PIXPointer opv_pDestPoint;
 POINT ov_pDestPoint;
 POINT* spv_pDestPoint;
 POINT sv_pDestPoint;
reader.readParameter<PIXPointer>(&opv_pDestPoint);
reader.readParameter< POINT>(&ov_pDestPoint);
spv_pDestPoint = (opv_pDestPoint == 0 ) ? 0: &sv_pDestPoint;
sv_pDestPoint = ov_pDestPoint;

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UpdateSurface(
sip_pSourceSurface ,spv_pSourceRect ,sip_pDestinationSurface ,spv_pDestPoint);

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_UPDATESURFACE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pSourceTexture;
IDirect3DBaseTexture9* sip_pSourceTexture;
reader.readParameter<PIXPointer>(&oip_pSourceTexture);
sip_pSourceTexture = static_cast<IDirect3DBaseTexture9*>(status.getSubstitute(oip_pSourceTexture));

PIXPointer oip_pDestinationTexture;
IDirect3DBaseTexture9* sip_pDestinationTexture;
reader.readParameter<PIXPointer>(&oip_pDestinationTexture);
sip_pDestinationTexture = static_cast<IDirect3DBaseTexture9*>(status.getSubstitute(oip_pDestinationTexture));

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UpdateTexture(
sip_pSourceTexture ,sip_pDestinationTexture);

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_UPDATETEXTURE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGETDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETFRONTBUFFERDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pSourceSurface;
IDirect3DSurface9* sip_pSourceSurface;
reader.readParameter<PIXPointer>(&oip_pSourceSurface);
sip_pSourceSurface = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pSourceSurface));

PIXPointer opv_pSourceRect;
 RECT ov_pSourceRect;
 RECT* spv_pSourceRect;
 RECT sv_pSourceRect;
reader.readParameter<PIXPointer>(&opv_pSourceRect);
reader.readParameter< RECT>(&ov_pSourceRect);
spv_pSourceRect = (opv_pSourceRect == 0 ) ? 0: &sv_pSourceRect;
sv_pSourceRect = ov_pSourceRect;

PIXPointer oip_pDestSurface;
IDirect3DSurface9* sip_pDestSurface;
reader.readParameter<PIXPointer>(&oip_pDestSurface);
sip_pDestSurface = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pDestSurface));

PIXPointer opv_pDestRect;
 RECT ov_pDestRect;
 RECT* spv_pDestRect;
 RECT sv_pDestRect;
reader.readParameter<PIXPointer>(&opv_pDestRect);
reader.readParameter< RECT>(&ov_pDestRect);
spv_pDestRect = (opv_pDestRect == 0 ) ? 0: &sv_pDestRect;
sv_pDestRect = ov_pDestRect;

D3DTEXTUREFILTERTYPE ov_Filter;
D3DTEXTUREFILTERTYPE sv_Filter;
reader.readParameter<D3DTEXTUREFILTERTYPE>(&ov_Filter);
sv_Filter = ov_Filter;

#ifdef D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> StretchRect(
sip_pSourceSurface ,spv_pSourceRect ,sip_pDestSurface ,spv_pDestRect ,sv_Filter);

#ifdef D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_STRETCHRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_COLORFILL() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_COLORFILL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_COLORFILL", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pSurface;
IDirect3DSurface9* sip_pSurface;
reader.readParameter<PIXPointer>(&oip_pSurface);
sip_pSurface = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pSurface));

PIXPointer opv_pRect;
 RECT ov_pRect;
 RECT* spv_pRect;
 RECT sv_pRect;
reader.readParameter<PIXPointer>(&opv_pRect);
reader.readParameter< RECT>(&ov_pRect);
spv_pRect = (opv_pRect == 0 ) ? 0: &sv_pRect;
sv_pRect = ov_pRect;

D3DCOLOR ov_color;
D3DCOLOR sv_color;
reader.readParameter<D3DCOLOR>(&ov_color);
sv_color = ov_color;

#ifdef D3D9OP_IDIRECT3DDEVICE9_COLORFILL_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_COLORFILL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_COLORFILL_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_COLORFILL_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_COLORFILL interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_COLORFILL", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> ColorFill(
sip_pSurface ,spv_pRect ,sv_color);

#ifdef D3D9OP_IDIRECT3DDEVICE9_COLORFILL_USER_POST
D3D9OP_IDIRECT3DDEVICE9_COLORFILL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_COLORFILL_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_COLORFILL_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_COLORFILL didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Width;
UINT sv_Width;
reader.readParameter<UINT>(&ov_Width);
sv_Width = ov_Width;

UINT ov_Height;
UINT sv_Height;
reader.readParameter<UINT>(&ov_Height);
sv_Height = ov_Height;

D3DFORMAT ov_Format;
D3DFORMAT sv_Format;
reader.readParameter<D3DFORMAT>(&ov_Format);
sv_Format = ov_Format;

D3DPOOL ov_Pool;
D3DPOOL sv_Pool;
reader.readParameter<D3DPOOL>(&ov_Pool);
sv_Pool = ov_Pool;

PIXPointer opip_ppSurface;
PIXPointer oip_ppSurface;
IDirect3DSurface9** spip_ppSurface;
IDirect3DSurface9* sip_ppSurface;
reader.readParameter<PIXPointer>(&opip_ppSurface);
reader.readParameter<PIXPointer>(&oip_ppSurface);
spip_ppSurface = &sip_ppSurface;

PIXPointer ov_pSharedHandle;
HANDLE* sv_pSharedHandle;
reader.readParameter<PIXPointer>(&ov_pSharedHandle);
sv_pSharedHandle = (HANDLE*) pointer(ov_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateOffscreenPlainSurface(
sv_Width ,sv_Height ,sv_Format ,sv_Pool ,spip_ppSurface ,sv_pSharedHandle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEOFFSCREENPLAINSURFACE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSurface, sip_ppSurface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_RenderTargetIndex;
DWORD sv_RenderTargetIndex;
reader.readParameter<PIXPointer>(&ov_RenderTargetIndex);
sv_RenderTargetIndex = (DWORD) pointer(ov_RenderTargetIndex);

PIXPointer oip_pRenderTarget;
IDirect3DSurface9* sip_pRenderTarget;
reader.readParameter<PIXPointer>(&oip_pRenderTarget);
sip_pRenderTarget = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pRenderTarget));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetRenderTarget(
sv_RenderTargetIndex ,sip_pRenderTarget);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETRENDERTARGET didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_RenderTargetIndex;
DWORD sv_RenderTargetIndex;
reader.readParameter<PIXPointer>(&ov_RenderTargetIndex);
sv_RenderTargetIndex = (DWORD) pointer(ov_RenderTargetIndex);

PIXPointer opip_ppRenderTarget;
PIXPointer oip_ppRenderTarget;
IDirect3DSurface9** spip_ppRenderTarget;
IDirect3DSurface9* sip_ppRenderTarget;
reader.readParameter<PIXPointer>(&opip_ppRenderTarget);
reader.readParameter<PIXPointer>(&oip_ppRenderTarget);
spip_ppRenderTarget = &sip_ppRenderTarget;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetRenderTarget(
sv_RenderTargetIndex ,spip_ppRenderTarget);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETRENDERTARGET didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppRenderTarget, sip_ppRenderTarget);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pNewZStencil;
IDirect3DSurface9* sip_pNewZStencil;
reader.readParameter<PIXPointer>(&oip_pNewZStencil);
sip_pNewZStencil = static_cast<IDirect3DSurface9*>(status.getSubstitute(oip_pNewZStencil));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetDepthStencilSurface(
sip_pNewZStencil);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETDEPTHSTENCILSURFACE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppZStencilSurface;
PIXPointer oip_ppZStencilSurface;
IDirect3DSurface9** spip_ppZStencilSurface;
IDirect3DSurface9* sip_ppZStencilSurface;
reader.readParameter<PIXPointer>(&opip_ppZStencilSurface);
reader.readParameter<PIXPointer>(&oip_ppZStencilSurface);
spip_ppZStencilSurface = &sip_ppZStencilSurface;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDepthStencilSurface(
spip_ppZStencilSurface);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETDEPTHSTENCILSURFACE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppZStencilSurface, sip_ppZStencilSurface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> BeginScene(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_BEGINSCENE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_ENDSCENE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ENDSCENE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_ENDSCENE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ENDSCENE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> EndScene(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_ENDSCENE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_ENDSCENE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CLEAR() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CLEAR_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CLEAR", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Count;
DWORD sv_Count;
reader.readParameter<PIXPointer>(&ov_Count);
sv_Count = (DWORD) pointer(ov_Count);

PIXPointer opv_pRects;
 D3DRECT ov_pRects;
 D3DRECT* spv_pRects;
 D3DRECT sv_pRects;
reader.readParameter<PIXPointer>(&opv_pRects);
reader.readParameter< D3DRECT>(&ov_pRects);
spv_pRects = (opv_pRects == 0 ) ? 0: &sv_pRects;
sv_pRects = ov_pRects;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

D3DCOLOR ov_Color;
D3DCOLOR sv_Color;
reader.readParameter<D3DCOLOR>(&ov_Color);
sv_Color = ov_Color;

float ov_Z;
float sv_Z;
reader.readParameter<float>(&ov_Z);
sv_Z = ov_Z;

PIXPointer ov_Stencil;
DWORD sv_Stencil;
reader.readParameter<PIXPointer>(&ov_Stencil);
sv_Stencil = (DWORD) pointer(ov_Stencil);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CLEAR_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CLEAR_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CLEAR_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CLEAR_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CLEAR interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CLEAR", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Clear(
sv_Count ,spv_pRects ,sv_Flags ,sv_Color ,sv_Z ,sv_Stencil);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CLEAR_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CLEAR_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CLEAR_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CLEAR_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CLEAR didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DTRANSFORMSTATETYPE ov_State;
D3DTRANSFORMSTATETYPE sv_State;
reader.readParameter<D3DTRANSFORMSTATETYPE>(&ov_State);
sv_State = ov_State;

PIXPointer opv_pMatrix;
 D3DMATRIX ov_pMatrix;
 D3DMATRIX* spv_pMatrix;
 D3DMATRIX sv_pMatrix;
reader.readParameter<PIXPointer>(&opv_pMatrix);
reader.readParameter< D3DMATRIX>(&ov_pMatrix);
spv_pMatrix = (opv_pMatrix == 0 ) ? 0: &sv_pMatrix;
sv_pMatrix = ov_pMatrix;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetTransform(
sv_State ,spv_pMatrix);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETTRANSFORM didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETTRANSFORM_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DTRANSFORMSTATETYPE ov_State;
D3DTRANSFORMSTATETYPE sv_State;
reader.readParameter<D3DTRANSFORMSTATETYPE>(&ov_State);
sv_State = ov_State;

PIXPointer opv_pMatrix;
 D3DMATRIX ov_pMatrix;
 D3DMATRIX* spv_pMatrix;
 D3DMATRIX sv_pMatrix;
reader.readParameter<PIXPointer>(&opv_pMatrix);
reader.readParameter< D3DMATRIX>(&ov_pMatrix);
spv_pMatrix = (opv_pMatrix == 0 ) ? 0: &sv_pMatrix;
sv_pMatrix = ov_pMatrix;

#ifdef D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> MultiplyTransform(
sv_State ,spv_pMatrix);

#ifdef D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_USER_POST
D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_MULTIPLYTRANSFORM didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pViewport;
 D3DVIEWPORT9 ov_pViewport;
 D3DVIEWPORT9* spv_pViewport;
 D3DVIEWPORT9 sv_pViewport;
reader.readParameter<PIXPointer>(&opv_pViewport);
reader.readParameter< D3DVIEWPORT9>(&ov_pViewport);
spv_pViewport = (opv_pViewport == 0 ) ? 0: &sv_pViewport;
sv_pViewport = ov_pViewport;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetViewport(
spv_pViewport);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVIEWPORT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVIEWPORT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pMaterial;
 D3DMATERIAL9 ov_pMaterial;
 D3DMATERIAL9* spv_pMaterial;
 D3DMATERIAL9 sv_pMaterial;
reader.readParameter<PIXPointer>(&opv_pMaterial);
reader.readParameter< D3DMATERIAL9>(&ov_pMaterial);
spv_pMaterial = (opv_pMaterial == 0 ) ? 0: &sv_pMaterial;
sv_pMaterial = ov_pMaterial;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetMaterial(
spv_pMaterial);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETMATERIAL didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETMATERIAL_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETLIGHT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETLIGHT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Index;
DWORD sv_Index;
reader.readParameter<PIXPointer>(&ov_Index);
sv_Index = (DWORD) pointer(ov_Index);

PIXPointer opv_pLight;
 D3DLIGHT9 ov_pLight;
 D3DLIGHT9* spv_pLight;
 D3DLIGHT9 sv_pLight;
reader.readParameter<PIXPointer>(&opv_pLight);
reader.readParameter< D3DLIGHT9>(&ov_pLight);
spv_pLight = (opv_pLight == 0 ) ? 0: &sv_pLight;
sv_pLight = ov_pLight;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETLIGHT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETLIGHT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetLight(
sv_Index ,spv_pLight);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETLIGHT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETLIGHT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETLIGHT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETLIGHT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETLIGHT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Index;
DWORD sv_Index;
reader.readParameter<PIXPointer>(&ov_Index);
sv_Index = (DWORD) pointer(ov_Index);

BOOL ov_Enable;
BOOL sv_Enable;
reader.readParameter<BOOL>(&ov_Enable);
sv_Enable = ov_Enable;

#ifdef D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LightEnable(
sv_Index ,sv_Enable);

#ifdef D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_LIGHTENABLE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETLIGHTENABLE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Index;
DWORD sv_Index;
reader.readParameter<PIXPointer>(&ov_Index);
sv_Index = (DWORD) pointer(ov_Index);

PIXPointer opv_pPlane;
 float ov_pPlane;
 float* spv_pPlane;
 float sv_pPlane;
reader.readParameter<PIXPointer>(&opv_pPlane);
reader.readParameter< float>(&ov_pPlane);
spv_pPlane = (opv_pPlane == 0 ) ? 0: &sv_pPlane;
sv_pPlane = ov_pPlane;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetClipPlane(
sv_Index ,spv_pPlane);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETCLIPPLANE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETCLIPPLANE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DRENDERSTATETYPE ov_State;
D3DRENDERSTATETYPE sv_State;
reader.readParameter<D3DRENDERSTATETYPE>(&ov_State);
sv_State = ov_State;

PIXPointer ov_Value;
DWORD sv_Value;
reader.readParameter<PIXPointer>(&ov_Value);
sv_Value = (DWORD) pointer(ov_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetRenderState(
sv_State ,sv_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETRENDERSTATE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETRENDERSTATE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DSTATEBLOCKTYPE ov_Type;
D3DSTATEBLOCKTYPE sv_Type;
reader.readParameter<D3DSTATEBLOCKTYPE>(&ov_Type);
sv_Type = ov_Type;

PIXPointer opip_ppSB;
PIXPointer oip_ppSB;
IDirect3DStateBlock9** spip_ppSB;
IDirect3DStateBlock9* sip_ppSB;
reader.readParameter<PIXPointer>(&opip_ppSB);
reader.readParameter<PIXPointer>(&oip_ppSB);
spip_ppSB = &sip_ppSB;

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateStateBlock(
sv_Type ,spip_ppSB);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATESTATEBLOCK didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSB, sip_ppSB);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> BeginStateBlock(
);

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_USER_POST
D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_BEGINSTATEBLOCK didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppSB;
PIXPointer oip_ppSB;
IDirect3DStateBlock9** spip_ppSB;
IDirect3DStateBlock9* sip_ppSB;
reader.readParameter<PIXPointer>(&opip_ppSB);
reader.readParameter<PIXPointer>(&oip_ppSB);
spip_ppSB = &sip_ppSB;

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> EndStateBlock(
spip_ppSB);

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_USER_POST
D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_ENDSTATEBLOCK didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSB, sip_ppSB);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pClipStatus;
 D3DCLIPSTATUS9 ov_pClipStatus;
 D3DCLIPSTATUS9* spv_pClipStatus;
 D3DCLIPSTATUS9 sv_pClipStatus;
reader.readParameter<PIXPointer>(&opv_pClipStatus);
reader.readParameter< D3DCLIPSTATUS9>(&ov_pClipStatus);
spv_pClipStatus = (opv_pClipStatus == 0 ) ? 0: &sv_pClipStatus;
sv_pClipStatus = ov_pClipStatus;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetClipStatus(
spv_pClipStatus);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETCLIPSTATUS didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETCLIPSTATUS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Stage;
DWORD sv_Stage;
reader.readParameter<PIXPointer>(&ov_Stage);
sv_Stage = (DWORD) pointer(ov_Stage);

PIXPointer opip_ppTexture;
PIXPointer oip_ppTexture;
IDirect3DBaseTexture9** spip_ppTexture;
IDirect3DBaseTexture9* sip_ppTexture;
reader.readParameter<PIXPointer>(&opip_ppTexture);
reader.readParameter<PIXPointer>(&oip_ppTexture);
spip_ppTexture = &sip_ppTexture;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetTexture(
sv_Stage ,spip_ppTexture);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETTEXTURE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppTexture, sip_ppTexture);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Stage;
DWORD sv_Stage;
reader.readParameter<PIXPointer>(&ov_Stage);
sv_Stage = (DWORD) pointer(ov_Stage);

PIXPointer oip_pTexture;
IDirect3DBaseTexture9* sip_pTexture;
reader.readParameter<PIXPointer>(&oip_pTexture);
sip_pTexture = static_cast<IDirect3DBaseTexture9*>(status.getSubstitute(oip_pTexture));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetTexture(
sv_Stage ,sip_pTexture);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETTEXTURE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETTEXTURESTAGESTATE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Stage;
DWORD sv_Stage;
reader.readParameter<PIXPointer>(&ov_Stage);
sv_Stage = (DWORD) pointer(ov_Stage);

D3DTEXTURESTAGESTATETYPE ov_Type;
D3DTEXTURESTAGESTATETYPE sv_Type;
reader.readParameter<D3DTEXTURESTAGESTATETYPE>(&ov_Type);
sv_Type = ov_Type;

PIXPointer ov_Value;
DWORD sv_Value;
reader.readParameter<PIXPointer>(&ov_Value);
sv_Value = (DWORD) pointer(ov_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetTextureStageState(
sv_Stage ,sv_Type ,sv_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETTEXTURESTAGESTATE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSAMPLERSTATE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_Sampler;
DWORD sv_Sampler;
reader.readParameter<PIXPointer>(&ov_Sampler);
sv_Sampler = (DWORD) pointer(ov_Sampler);

D3DSAMPLERSTATETYPE ov_Type;
D3DSAMPLERSTATETYPE sv_Type;
reader.readParameter<D3DSAMPLERSTATETYPE>(&ov_Type);
sv_Type = ov_Type;

PIXPointer ov_Value;
DWORD sv_Value;
reader.readParameter<PIXPointer>(&ov_Value);
sv_Value = (DWORD) pointer(ov_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetSamplerState(
sv_Sampler ,sv_Type ,sv_Value);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETSAMPLERSTATE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_VALIDATEDEVICE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_PaletteNumber;
UINT sv_PaletteNumber;
reader.readParameter<UINT>(&ov_PaletteNumber);
sv_PaletteNumber = ov_PaletteNumber;

PIXPointer opv_pEntries;
 PALETTEENTRY ov_pEntries;
 PALETTEENTRY* spv_pEntries;
 PALETTEENTRY sv_pEntries;
reader.readParameter<PIXPointer>(&opv_pEntries);
reader.readParameter< PALETTEENTRY>(&ov_pEntries);
spv_pEntries = (opv_pEntries == 0 ) ? 0: &sv_pEntries;
sv_pEntries = ov_pEntries;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPaletteEntries(
sv_PaletteNumber ,spv_pEntries);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETPALETTEENTRIES didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETPALETTEENTRIES_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_PaletteNumber;
UINT sv_PaletteNumber;
reader.readParameter<UINT>(&ov_PaletteNumber);
sv_PaletteNumber = ov_PaletteNumber;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetCurrentTexturePalette(
sv_PaletteNumber);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETCURRENTTEXTUREPALETTE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETCURRENTTEXTUREPALETTE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pRect;
 RECT ov_pRect;
 RECT* spv_pRect;
 RECT sv_pRect;
reader.readParameter<PIXPointer>(&opv_pRect);
reader.readParameter< RECT>(&ov_pRect);
spv_pRect = (opv_pRect == 0 ) ? 0: &sv_pRect;
sv_pRect = ov_pRect;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetScissorRect(
spv_pRect);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETSCISSORRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSCISSORRECT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

BOOL ov_bSoftware;
BOOL sv_bSoftware;
reader.readParameter<BOOL>(&ov_bSoftware);
sv_bSoftware = ov_bSoftware;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetSoftwareVertexProcessing(
sv_bSoftware);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETSOFTWAREVERTEXPROCESSING didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSOFTWAREVERTEXPROCESSING_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

float ov_nSegments;
float sv_nSegments;
reader.readParameter<float>(&ov_nSegments);
sv_nSegments = ov_nSegments;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetNPatchMode(
sv_nSegments);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETNPATCHMODE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETNPATCHMODE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DPRIMITIVETYPE ov_PrimitiveType;
D3DPRIMITIVETYPE sv_PrimitiveType;
reader.readParameter<D3DPRIMITIVETYPE>(&ov_PrimitiveType);
sv_PrimitiveType = ov_PrimitiveType;

UINT ov_StartVertex;
UINT sv_StartVertex;
reader.readParameter<UINT>(&ov_StartVertex);
sv_StartVertex = ov_StartVertex;

UINT ov_PrimitiveCount;
UINT sv_PrimitiveCount;
reader.readParameter<UINT>(&ov_PrimitiveCount);
sv_PrimitiveCount = ov_PrimitiveCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> DrawPrimitive(
sv_PrimitiveType ,sv_StartVertex ,sv_PrimitiveCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DPRIMITIVETYPE ov_Type;
D3DPRIMITIVETYPE sv_Type;
reader.readParameter<D3DPRIMITIVETYPE>(&ov_Type);
sv_Type = ov_Type;

INT ov_BaseVertexIndex;
INT sv_BaseVertexIndex;
reader.readParameter<INT>(&ov_BaseVertexIndex);
sv_BaseVertexIndex = ov_BaseVertexIndex;

UINT ov_MinVertexIndex;
UINT sv_MinVertexIndex;
reader.readParameter<UINT>(&ov_MinVertexIndex);
sv_MinVertexIndex = ov_MinVertexIndex;

UINT ov_NumVertices;
UINT sv_NumVertices;
reader.readParameter<UINT>(&ov_NumVertices);
sv_NumVertices = ov_NumVertices;

UINT ov_startIndex;
UINT sv_startIndex;
reader.readParameter<UINT>(&ov_startIndex);
sv_startIndex = ov_startIndex;

UINT ov_primCount;
UINT sv_primCount;
reader.readParameter<UINT>(&ov_primCount);
sv_primCount = ov_primCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> DrawIndexedPrimitive(
sv_Type ,sv_BaseVertexIndex ,sv_MinVertexIndex ,sv_NumVertices ,sv_startIndex ,sv_primCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DPRIMITIVETYPE ov_PrimitiveType;
D3DPRIMITIVETYPE sv_PrimitiveType;
reader.readParameter<D3DPRIMITIVETYPE>(&ov_PrimitiveType);
sv_PrimitiveType = ov_PrimitiveType;

UINT ov_PrimitiveCount;
UINT sv_PrimitiveCount;
reader.readParameter<UINT>(&ov_PrimitiveCount);
sv_PrimitiveCount = ov_PrimitiveCount;

PIXPointer ov_pVertexStreamZeroData;
 void* sv_pVertexStreamZeroData;
reader.readParameter<PIXPointer>(&ov_pVertexStreamZeroData);
sv_pVertexStreamZeroData = ( void*) pointer(ov_pVertexStreamZeroData);

UINT ov_VertexStreamZeroStride;
UINT sv_VertexStreamZeroStride;
reader.readParameter<UINT>(&ov_VertexStreamZeroStride);
sv_VertexStreamZeroStride = ov_VertexStreamZeroStride;

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> DrawPrimitiveUP(
sv_PrimitiveType ,sv_PrimitiveCount ,sv_pVertexStreamZeroData ,sv_VertexStreamZeroStride);

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_DRAWPRIMITIVEUP didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

D3DPRIMITIVETYPE ov_PrimitiveType;
D3DPRIMITIVETYPE sv_PrimitiveType;
reader.readParameter<D3DPRIMITIVETYPE>(&ov_PrimitiveType);
sv_PrimitiveType = ov_PrimitiveType;

UINT ov_MinVertexIndex;
UINT sv_MinVertexIndex;
reader.readParameter<UINT>(&ov_MinVertexIndex);
sv_MinVertexIndex = ov_MinVertexIndex;

UINT ov_NumVertices;
UINT sv_NumVertices;
reader.readParameter<UINT>(&ov_NumVertices);
sv_NumVertices = ov_NumVertices;

UINT ov_PrimitiveCount;
UINT sv_PrimitiveCount;
reader.readParameter<UINT>(&ov_PrimitiveCount);
sv_PrimitiveCount = ov_PrimitiveCount;

PIXPointer ov_pIndexData;
 void* sv_pIndexData;
reader.readParameter<PIXPointer>(&ov_pIndexData);
sv_pIndexData = ( void*) pointer(ov_pIndexData);

D3DFORMAT ov_IndexDataFormat;
D3DFORMAT sv_IndexDataFormat;
reader.readParameter<D3DFORMAT>(&ov_IndexDataFormat);
sv_IndexDataFormat = ov_IndexDataFormat;

PIXPointer ov_pVertexStreamZeroData;
 void* sv_pVertexStreamZeroData;
reader.readParameter<PIXPointer>(&ov_pVertexStreamZeroData);
sv_pVertexStreamZeroData = ( void*) pointer(ov_pVertexStreamZeroData);

UINT ov_VertexStreamZeroStride;
UINT sv_VertexStreamZeroStride;
reader.readParameter<UINT>(&ov_VertexStreamZeroStride);
sv_VertexStreamZeroStride = ov_VertexStreamZeroStride;

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> DrawIndexedPrimitiveUP(
sv_PrimitiveType ,sv_MinVertexIndex ,sv_NumVertices ,sv_PrimitiveCount ,sv_pIndexData ,sv_IndexDataFormat ,sv_pVertexStreamZeroData ,sv_VertexStreamZeroStride);

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_DRAWINDEXEDPRIMITIVEUP didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_SrcStartIndex;
UINT sv_SrcStartIndex;
reader.readParameter<UINT>(&ov_SrcStartIndex);
sv_SrcStartIndex = ov_SrcStartIndex;

UINT ov_DestIndex;
UINT sv_DestIndex;
reader.readParameter<UINT>(&ov_DestIndex);
sv_DestIndex = ov_DestIndex;

UINT ov_VertexCount;
UINT sv_VertexCount;
reader.readParameter<UINT>(&ov_VertexCount);
sv_VertexCount = ov_VertexCount;

PIXPointer oip_pDestBuffer;
IDirect3DVertexBuffer9* sip_pDestBuffer;
reader.readParameter<PIXPointer>(&oip_pDestBuffer);
sip_pDestBuffer = static_cast<IDirect3DVertexBuffer9*>(status.getSubstitute(oip_pDestBuffer));

PIXPointer oip_pVertexDecl;
IDirect3DVertexDeclaration9* sip_pVertexDecl;
reader.readParameter<PIXPointer>(&oip_pVertexDecl);
sip_pVertexDecl = static_cast<IDirect3DVertexDeclaration9*>(status.getSubstitute(oip_pVertexDecl));

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> ProcessVertices(
sv_SrcStartIndex ,sv_DestIndex ,sv_VertexCount ,sip_pDestBuffer ,sip_pVertexDecl ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_PROCESSVERTICES didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_pVertexElements;
 D3DVERTEXELEMENT9* sv_pVertexElements;
reader.readParameter<PIXPointer>(&ov_pVertexElements);
sv_pVertexElements = ( D3DVERTEXELEMENT9*) pointer(ov_pVertexElements);

PIXPointer opip_ppDecl;
PIXPointer oip_ppDecl;
IDirect3DVertexDeclaration9** spip_ppDecl;
IDirect3DVertexDeclaration9* sip_ppDecl;
reader.readParameter<PIXPointer>(&opip_ppDecl);
reader.readParameter<PIXPointer>(&oip_ppDecl);
spip_ppDecl = &sip_ppDecl;

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateVertexDeclaration(
sv_pVertexElements ,spip_ppDecl);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXDECLARATION didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDecl, sip_ppDecl);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pDecl;
IDirect3DVertexDeclaration9* sip_pDecl;
reader.readParameter<PIXPointer>(&oip_pDecl);
sip_pDecl = static_cast<IDirect3DVertexDeclaration9*>(status.getSubstitute(oip_pDecl));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetVertexDeclaration(
sip_pDecl);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVERTEXDECLARATION didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDecl;
PIXPointer oip_ppDecl;
IDirect3DVertexDeclaration9** spip_ppDecl;
IDirect3DVertexDeclaration9* sip_ppDecl;
reader.readParameter<PIXPointer>(&opip_ppDecl);
reader.readParameter<PIXPointer>(&oip_ppDecl);
spip_ppDecl = &sip_ppDecl;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetVertexDeclaration(
spip_ppDecl);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETVERTEXDECLARATION didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDecl, sip_ppDecl);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETFVF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETFVF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETFVF", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_FVF;
DWORD sv_FVF;
reader.readParameter<PIXPointer>(&ov_FVF);
sv_FVF = (DWORD) pointer(ov_FVF);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETFVF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETFVF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETFVF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETFVF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETFVF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETFVF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetFVF(
sv_FVF);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETFVF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETFVF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETFVF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETFVF_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETFVF didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETFVF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFVF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETFVF", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFVF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETFVF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFVF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETFVF_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFVF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETFVF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETFVF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETFVF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_pFunction;
 DWORD* sv_pFunction;
reader.readParameter<PIXPointer>(&ov_pFunction);
sv_pFunction = ( DWORD*) pointer(ov_pFunction);

PIXPointer opip_ppShader;
PIXPointer oip_ppShader;
IDirect3DVertexShader9** spip_ppShader;
IDirect3DVertexShader9* sip_ppShader;
reader.readParameter<PIXPointer>(&opip_ppShader);
reader.readParameter<PIXPointer>(&oip_ppShader);
spip_ppShader = &sip_ppShader;

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreateVertexShader(
sv_pFunction ,spip_ppShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEVERTEXSHADER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppShader, sip_ppShader);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pShader;
IDirect3DVertexShader9* sip_pShader;
reader.readParameter<PIXPointer>(&oip_pShader);
sip_pShader = static_cast<IDirect3DVertexShader9*>(status.getSubstitute(oip_pShader));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetVertexShader(
sip_pShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADER didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppShader;
PIXPointer oip_ppShader;
IDirect3DVertexShader9** spip_ppShader;
IDirect3DVertexShader9* sip_ppShader;
reader.readParameter<PIXPointer>(&opip_ppShader);
reader.readParameter<PIXPointer>(&oip_ppShader);
spip_ppShader = &sip_ppShader;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetVertexShader(
spip_ppShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppShader, sip_ppShader);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 float ov_pConstantData;
 float* spv_pConstantData;
 float sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< float>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_Vector4fCount;
UINT sv_Vector4fCount;
reader.readParameter<UINT>(&ov_Vector4fCount);
sv_Vector4fCount = ov_Vector4fCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetVertexShaderConstantF(
sv_StartRegister ,spv_pConstantData ,sv_Vector4fCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTF didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 int ov_pConstantData;
 int* spv_pConstantData;
 int sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< int>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_Vector4iCount;
UINT sv_Vector4iCount;
reader.readParameter<UINT>(&ov_Vector4iCount);
sv_Vector4iCount = ov_Vector4iCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetVertexShaderConstantI(
sv_StartRegister ,spv_pConstantData ,sv_Vector4iCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTI didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTI_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 BOOL ov_pConstantData;
 BOOL* spv_pConstantData;
 BOOL sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< BOOL>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_BoolCount;
UINT sv_BoolCount;
reader.readParameter<UINT>(&ov_BoolCount);
sv_BoolCount = ov_BoolCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetVertexShaderConstantB(
sv_StartRegister ,spv_pConstantData ,sv_BoolCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETVERTEXSHADERCONSTANTB didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETVERTEXSHADERCONSTANTB_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StreamNumber;
UINT sv_StreamNumber;
reader.readParameter<UINT>(&ov_StreamNumber);
sv_StreamNumber = ov_StreamNumber;

PIXPointer oip_pStreamData;
IDirect3DVertexBuffer9* sip_pStreamData;
reader.readParameter<PIXPointer>(&oip_pStreamData);
sip_pStreamData = static_cast<IDirect3DVertexBuffer9*>(status.getSubstitute(oip_pStreamData));

UINT ov_OffsetInBytes;
UINT sv_OffsetInBytes;
reader.readParameter<UINT>(&ov_OffsetInBytes);
sv_OffsetInBytes = ov_OffsetInBytes;

UINT ov_Stride;
UINT sv_Stride;
reader.readParameter<UINT>(&ov_Stride);
sv_Stride = ov_Stride;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetStreamSource(
sv_StreamNumber ,sip_pStreamData ,sv_OffsetInBytes ,sv_Stride);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StreamNumber;
UINT sv_StreamNumber;
reader.readParameter<UINT>(&ov_StreamNumber);
sv_StreamNumber = ov_StreamNumber;

PIXPointer opip_ppStreamData;
PIXPointer oip_ppStreamData;
IDirect3DVertexBuffer9** spip_ppStreamData;
IDirect3DVertexBuffer9* sip_ppStreamData;
reader.readParameter<PIXPointer>(&opip_ppStreamData);
reader.readParameter<PIXPointer>(&oip_ppStreamData);
spip_ppStreamData = &sip_ppStreamData;

PIXPointer opv_pOffsetInBytes;
UINT ov_pOffsetInBytes;
UINT* spv_pOffsetInBytes;
UINT sv_pOffsetInBytes;
reader.readParameter<PIXPointer>(&opv_pOffsetInBytes);
reader.readParameter<UINT>(&ov_pOffsetInBytes);
spv_pOffsetInBytes = (opv_pOffsetInBytes == 0 ) ? 0: &sv_pOffsetInBytes;
sv_pOffsetInBytes = ov_pOffsetInBytes;

PIXPointer opv_pStride;
UINT ov_pStride;
UINT* spv_pStride;
UINT sv_pStride;
reader.readParameter<PIXPointer>(&opv_pStride);
reader.readParameter<UINT>(&ov_pStride);
spv_pStride = (opv_pStride == 0 ) ? 0: &sv_pStride;
sv_pStride = ov_pStride;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetStreamSource(
sv_StreamNumber ,spip_ppStreamData ,spv_pOffsetInBytes ,spv_pStride);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppStreamData, sip_ppStreamData);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StreamNumber;
UINT sv_StreamNumber;
reader.readParameter<UINT>(&ov_StreamNumber);
sv_StreamNumber = ov_StreamNumber;

UINT ov_Setting;
UINT sv_Setting;
reader.readParameter<UINT>(&ov_Setting);
sv_Setting = ov_Setting;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetStreamSourceFreq(
sv_StreamNumber ,sv_Setting);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETSTREAMSOURCEFREQ didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETSTREAMSOURCEFREQ_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETINDICES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETINDICES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETINDICES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pIndexData;
IDirect3DIndexBuffer9* sip_pIndexData;
reader.readParameter<PIXPointer>(&oip_pIndexData);
sip_pIndexData = static_cast<IDirect3DIndexBuffer9*>(status.getSubstitute(oip_pIndexData));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETINDICES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETINDICES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETINDICES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETINDICES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETINDICES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETINDICES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetIndices(
sip_pIndexData);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETINDICES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETINDICES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETINDICES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETINDICES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETINDICES didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETINDICES() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETINDICES_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETINDICES", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppIndexData;
PIXPointer oip_ppIndexData;
IDirect3DIndexBuffer9** spip_ppIndexData;
IDirect3DIndexBuffer9* sip_ppIndexData;
reader.readParameter<PIXPointer>(&opip_ppIndexData);
reader.readParameter<PIXPointer>(&oip_ppIndexData);
spip_ppIndexData = &sip_ppIndexData;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETINDICES_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETINDICES_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETINDICES_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETINDICES_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETINDICES interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETINDICES", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetIndices(
spip_ppIndexData);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETINDICES_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETINDICES_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETINDICES_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETINDICES_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETINDICES didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppIndexData, sip_ppIndexData);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer ov_pFunction;
 DWORD* sv_pFunction;
reader.readParameter<PIXPointer>(&ov_pFunction);
sv_pFunction = ( DWORD*) pointer(ov_pFunction);

PIXPointer opip_ppShader;
PIXPointer oip_ppShader;
IDirect3DPixelShader9** spip_ppShader;
IDirect3DPixelShader9* sip_ppShader;
reader.readParameter<PIXPointer>(&opip_ppShader);
reader.readParameter<PIXPointer>(&oip_ppShader);
spip_ppShader = &sip_ppShader;

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> CreatePixelShader(
sv_pFunction ,spip_ppShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_CREATEPIXELSHADER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppShader, sip_ppShader);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer oip_pShader;
IDirect3DPixelShader9* sip_pShader;
reader.readParameter<PIXPointer>(&oip_pShader);
sip_pShader = static_cast<IDirect3DPixelShader9*>(status.getSubstitute(oip_pShader));

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPixelShader(
sip_pShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADER didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppShader;
PIXPointer oip_ppShader;
IDirect3DPixelShader9** spip_ppShader;
IDirect3DPixelShader9* sip_ppShader;
reader.readParameter<PIXPointer>(&opip_ppShader);
reader.readParameter<PIXPointer>(&oip_ppShader);
spip_ppShader = &sip_ppShader;

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetPixelShader(
spip_ppShader);

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppShader, sip_ppShader);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 float ov_pConstantData;
 float* spv_pConstantData;
 float sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< float>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_Vector4fCount;
UINT sv_Vector4fCount;
reader.readParameter<UINT>(&ov_Vector4fCount);
sv_Vector4fCount = ov_Vector4fCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPixelShaderConstantF(
sv_StartRegister ,spv_pConstantData ,sv_Vector4fCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTF didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 int ov_pConstantData;
 int* spv_pConstantData;
 int sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< int>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_Vector4iCount;
UINT sv_Vector4iCount;
reader.readParameter<UINT>(&ov_Vector4iCount);
sv_Vector4iCount = ov_Vector4iCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPixelShaderConstantI(
sv_StartRegister ,spv_pConstantData ,sv_Vector4iCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTI didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTI_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_StartRegister;
UINT sv_StartRegister;
reader.readParameter<UINT>(&ov_StartRegister);
sv_StartRegister = ov_StartRegister;

PIXPointer opv_pConstantData;
 BOOL ov_pConstantData;
 BOOL* spv_pConstantData;
 BOOL sv_pConstantData;
reader.readParameter<PIXPointer>(&opv_pConstantData);
reader.readParameter< BOOL>(&ov_pConstantData);
spv_pConstantData = (opv_pConstantData == 0 ) ? 0: &sv_pConstantData;
sv_pConstantData = ov_pConstantData;

UINT ov_BoolCount;
UINT sv_BoolCount;
reader.readParameter<UINT>(&ov_BoolCount);
sv_BoolCount = ov_BoolCount;

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPixelShaderConstantB(
sv_StartRegister ,spv_pConstantData ,sv_BoolCount);

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_USER_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_SETPIXELSHADERCONSTANTB didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_USER_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_GETPIXELSHADERCONSTANTB_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWRECTPATCH_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DRAWTRIPATCH_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DDevice9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DDevice9 *>(status.getSubstitute(oip_This));

UINT ov_Handle;
UINT sv_Handle;
reader.readParameter<UINT>(&ov_Handle);
sv_Handle = ov_Handle;

#ifdef D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> DeletePatch(
sv_Handle);

#ifdef D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_USER_POST
D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DDEVICE9_DELETEPATCH didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY() {

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_SPECIFIC_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_USER_PRE
D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_USER_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_SPECIFIC_POST
D3D9OP_IDIRECT3DDEVICE9_CREATEQUERY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DStateBlock9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DStateBlock9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DStateBlock9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DStateBlock9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DStateBlock9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DStateBlock9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSTATEBLOCK9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DStateBlock9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DStateBlock9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Capture(
);

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSTATEBLOCK9_CAPTURE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY() {

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DStateBlock9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DStateBlock9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_SPECIFIC_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_USER_PRE
D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Apply(
);

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_USER_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_SPECIFIC_POST
D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSTATEBLOCK9_APPLY didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSwapChain9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSwapChain9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSwapChain9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSwapChain9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSwapChain9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSwapChain9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pSourceRect;
 RECT ov_pSourceRect;
 RECT* spv_pSourceRect;
 RECT sv_pSourceRect;
reader.readParameter<PIXPointer>(&opv_pSourceRect);
reader.readParameter< RECT>(&ov_pSourceRect);
spv_pSourceRect = (opv_pSourceRect == 0 ) ? 0: &sv_pSourceRect;
sv_pSourceRect = ov_pSourceRect;

PIXPointer opv_pDestRect;
 RECT ov_pDestRect;
 RECT* spv_pDestRect;
 RECT sv_pDestRect;
reader.readParameter<PIXPointer>(&opv_pDestRect);
reader.readParameter< RECT>(&ov_pDestRect);
spv_pDestRect = (opv_pDestRect == 0 ) ? 0: &sv_pDestRect;
sv_pDestRect = ov_pDestRect;

PIXPointer ov_hDestWindowOverride;
HWND sv_hDestWindowOverride;
reader.readParameter<PIXPointer>(&ov_hDestWindowOverride);
sv_hDestWindowOverride = (HWND) pointer(ov_hDestWindowOverride);

PIXPointer ov_pDirtyRegion;
 RGNDATA* sv_pDirtyRegion;
reader.readParameter<PIXPointer>(&ov_pDirtyRegion);
sv_pDirtyRegion = ( RGNDATA*) pointer(ov_pDirtyRegion);

PIXPointer ov_dwFlags;
DWORD sv_dwFlags;
reader.readParameter<PIXPointer>(&ov_dwFlags);
sv_dwFlags = (DWORD) pointer(ov_dwFlags);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Present(
spv_pSourceRect ,spv_pDestRect ,sv_hDestWindowOverride ,sv_pDirtyRegion ,sv_dwFlags);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSWAPCHAIN9_PRESENT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETFRONTBUFFERDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSwapChain9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSwapChain9 *>(status.getSubstitute(oip_This));

UINT ov_iBackBuffer;
UINT sv_iBackBuffer;
reader.readParameter<UINT>(&ov_iBackBuffer);
sv_iBackBuffer = ov_iBackBuffer;

D3DBACKBUFFER_TYPE ov_Type;
D3DBACKBUFFER_TYPE sv_Type;
reader.readParameter<D3DBACKBUFFER_TYPE>(&ov_Type);
sv_Type = ov_Type;

PIXPointer opip_ppBackBuffer;
PIXPointer oip_ppBackBuffer;
IDirect3DSurface9** spip_ppBackBuffer;
IDirect3DSurface9* sip_ppBackBuffer;
reader.readParameter<PIXPointer>(&opip_ppBackBuffer);
reader.readParameter<PIXPointer>(&oip_ppBackBuffer);
spip_ppBackBuffer = &sip_ppBackBuffer;

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetBackBuffer(
sv_iBackBuffer ,sv_Type ,spip_ppBackBuffer);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSWAPCHAIN9_GETBACKBUFFER didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppBackBuffer, sip_ppBackBuffer);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETRASTERSTATUS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDISPLAYMODE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSwapChain9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSwapChain9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSWAPCHAIN9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS() {

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_SPECIFIC_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_USER_PRE
D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_USER_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_SPECIFIC_POST
D3D9OP_IDIRECT3DSWAPCHAIN9_GETPRESENTPARAMETERS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexDeclaration9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexDeclaration9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_USER_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexDeclaration9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexDeclaration9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_USER_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexDeclaration9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexDeclaration9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION() {

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_USER_PRE
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_USER_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXDECLARATION9_GETDECLARATION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexShader9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_USER_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexShader9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_USER_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexShader9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVERTEXSHADER9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION() {

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_USER_PRE
D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_USER_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXSHADER9_GETFUNCTION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DPIXELSHADER9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DPixelShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DPixelShader9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_USER_POST
D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DPIXELSHADER9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DPixelShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DPixelShader9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_USER_POST
D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DPIXELSHADER9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DPixelShader9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DPixelShader9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DPIXELSHADER9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION() {

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_SPECIFIC_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_USER_PRE
D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_USER_POST
D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_SPECIFIC_POST
D3D9OP_IDIRECT3DPIXELSHADER9_GETFUNCTION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDREF_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DTEXTURE9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_RELEASE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_SETLOD() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETLOD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_LODNew;
DWORD sv_LODNew;
reader.readParameter<PIXPointer>(&ov_LODNew);
sv_LODNew = (DWORD) pointer(ov_LODNew);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETLOD_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETLOD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_SETLOD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETLOD", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetLOD(
sv_LODNew);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETLOD_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_SETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_SETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETLOD() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETLOD", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLOD_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLOD_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLOD_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

D3DTEXTUREFILTERTYPE ov_FilterType;
D3DTEXTUREFILTERTYPE sv_FilterType;
reader.readParameter<D3DTEXTUREFILTERTYPE>(&ov_FilterType);
sv_FilterType = ov_FilterType;

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetAutoGenFilterType(
sv_FilterType);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_SETAUTOGENFILTERTYPE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> GenerateMipSubLevels(
);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETLEVELDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opip_ppSurfaceLevel;
PIXPointer oip_ppSurfaceLevel;
IDirect3DSurface9** spip_ppSurfaceLevel;
IDirect3DSurface9* sip_ppSurfaceLevel;
reader.readParameter<PIXPointer>(&opip_ppSurfaceLevel);
reader.readParameter<PIXPointer>(&oip_ppSurfaceLevel);
spip_ppSurfaceLevel = &sip_ppSurfaceLevel;

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetSurfaceLevel(
sv_Level ,spip_ppSurfaceLevel);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_GETSURFACELEVEL didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppSurfaceLevel, sip_ppSurfaceLevel);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opv_pLockedRect;
D3DLOCKED_RECT_COMP_WIN32 ov_pLockedRect;
D3DLOCKED_RECT* spv_pLockedRect;
D3DLOCKED_RECT sv_pLockedRect;
reader.readParameter<PIXPointer>(&opv_pLockedRect);
reader.readParameter<D3DLOCKED_RECT_COMP_WIN32>(&ov_pLockedRect);
spv_pLockedRect = (opv_pLockedRect == 0 ) ? 0: &sv_pLockedRect;
sv_pLockedRect.Pitch = ov_pLockedRect.Pitch;
sv_pLockedRect.pBits = (void *) pointer(ov_pLockedRect.pBits);

PIXPointer opv_pRect;
 RECT ov_pRect;
 RECT* spv_pRect;
 RECT sv_pRect;
reader.readParameter<PIXPointer>(&opv_pRect);
reader.readParameter< RECT>(&ov_pRect);
spv_pRect = (opv_pRect == 0 ) ? 0: &sv_pRect;
sv_pRect = ov_pRect;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LockRect(
sv_Level ,spv_pLockedRect ,spv_pRect ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_LOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

#ifdef D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UnlockRect(
sv_Level);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_UNLOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT() {

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DTexture9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pDirtyRect;
 RECT ov_pDirtyRect;
 RECT* spv_pDirtyRect;
 RECT sv_pDirtyRect;
reader.readParameter<PIXPointer>(&opv_pDirtyRect);
reader.readParameter< RECT>(&ov_pDirtyRect);
spv_pDirtyRect = (opv_pDirtyRect == 0 ) ? 0: &sv_pDirtyRect;
sv_pDirtyRect = ov_pDirtyRect;

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_USER_PRE
D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddDirtyRect(
spv_pDirtyRect);

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_USER_POST
D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DTEXTURE9_ADDDIRTYRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_LODNew;
DWORD sv_LODNew;
reader.readParameter<PIXPointer>(&ov_LODNew);
sv_LODNew = (DWORD) pointer(ov_LODNew);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetLOD(
sv_LODNew);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

D3DTEXTUREFILTERTYPE ov_FilterType;
D3DTEXTUREFILTERTYPE sv_FilterType;
reader.readParameter<D3DTEXTUREFILTERTYPE>(&ov_FilterType);
sv_FilterType = ov_FilterType;

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetAutoGenFilterType(
sv_FilterType);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_SETAUTOGENFILTERTYPE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> GenerateMipSubLevels(
);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETLEVELDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opip_ppVolumeLevel;
PIXPointer oip_ppVolumeLevel;
IDirect3DVolume9** spip_ppVolumeLevel;
IDirect3DVolume9* sip_ppVolumeLevel;
reader.readParameter<PIXPointer>(&opip_ppVolumeLevel);
reader.readParameter<PIXPointer>(&oip_ppVolumeLevel);
spip_ppVolumeLevel = &sip_ppVolumeLevel;

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetVolumeLevel(
sv_Level ,spip_ppVolumeLevel);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_GETVOLUMELEVEL didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppVolumeLevel, sip_ppVolumeLevel);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opv_pLockedVolume;
D3DLOCKED_BOX_COMP_WIN32 ov_pLockedVolume;
D3DLOCKED_BOX* spv_pLockedVolume;
D3DLOCKED_BOX sv_pLockedVolume;
reader.readParameter<PIXPointer>(&opv_pLockedVolume);
reader.readParameter<D3DLOCKED_BOX_COMP_WIN32>(&ov_pLockedVolume);
spv_pLockedVolume = (opv_pLockedVolume == 0 ) ? 0: &sv_pLockedVolume;
sv_pLockedVolume.RowPitch = ov_pLockedVolume.RowPitch;
sv_pLockedVolume.SlicePitch = ov_pLockedVolume.SlicePitch;
sv_pLockedVolume.pBits = (void *) pointer(ov_pLockedVolume.pBits);

PIXPointer opv_pBox;
 D3DBOX ov_pBox;
 D3DBOX* spv_pBox;
 D3DBOX sv_pBox;
reader.readParameter<PIXPointer>(&opv_pBox);
reader.readParameter< D3DBOX>(&ov_pBox);
spv_pBox = (opv_pBox == 0 ) ? 0: &sv_pBox;
sv_pBox = ov_pBox;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LockBox(
sv_Level ,spv_pLockedVolume ,spv_pBox ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_LOCKBOX didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UnlockBox(
sv_Level);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_UNLOCKBOX didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX() {

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolumeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolumeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pDirtyBox;
 D3DBOX ov_pDirtyBox;
 D3DBOX* spv_pDirtyBox;
 D3DBOX sv_pDirtyBox;
reader.readParameter<PIXPointer>(&opv_pDirtyBox);
reader.readParameter< D3DBOX>(&ov_pDirtyBox);
spv_pDirtyBox = (opv_pDirtyBox == 0 ) ? 0: &sv_pDirtyBox;
sv_pDirtyBox = ov_pDirtyBox;

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_USER_PRE
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddDirtyBox(
spv_pDirtyBox);

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_USER_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUMETEXTURE9_ADDDIRTYBOX didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

PIXPointer ov_LODNew;
DWORD sv_LODNew;
reader.readParameter<PIXPointer>(&ov_LODNew);
sv_LODNew = (DWORD) pointer(ov_LODNew);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetLOD(
sv_LODNew);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLOD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELCOUNT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

D3DTEXTUREFILTERTYPE ov_FilterType;
D3DTEXTUREFILTERTYPE sv_FilterType;
reader.readParameter<D3DTEXTUREFILTERTYPE>(&ov_FilterType);
sv_FilterType = ov_FilterType;

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetAutoGenFilterType(
sv_FilterType);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_SETAUTOGENFILTERTYPE didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETAUTOGENFILTERTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> GenerateMipSubLevels(
);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GENERATEMIPSUBLEVELS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETLEVELDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

D3DCUBEMAP_FACES ov_FaceType;
D3DCUBEMAP_FACES sv_FaceType;
reader.readParameter<D3DCUBEMAP_FACES>(&ov_FaceType);
sv_FaceType = ov_FaceType;

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opip_ppCubeMapSurface;
PIXPointer oip_ppCubeMapSurface;
IDirect3DSurface9** spip_ppCubeMapSurface;
IDirect3DSurface9* sip_ppCubeMapSurface;
reader.readParameter<PIXPointer>(&opip_ppCubeMapSurface);
reader.readParameter<PIXPointer>(&oip_ppCubeMapSurface);
spip_ppCubeMapSurface = &sip_ppCubeMapSurface;

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetCubeMapSurface(
sv_FaceType ,sv_Level ,spip_ppCubeMapSurface);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_GETCUBEMAPSURFACE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppCubeMapSurface, sip_ppCubeMapSurface);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

D3DCUBEMAP_FACES ov_FaceType;
D3DCUBEMAP_FACES sv_FaceType;
reader.readParameter<D3DCUBEMAP_FACES>(&ov_FaceType);
sv_FaceType = ov_FaceType;

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

PIXPointer opv_pLockedRect;
D3DLOCKED_RECT_COMP_WIN32 ov_pLockedRect;
D3DLOCKED_RECT* spv_pLockedRect;
D3DLOCKED_RECT sv_pLockedRect;
reader.readParameter<PIXPointer>(&opv_pLockedRect);
reader.readParameter<D3DLOCKED_RECT_COMP_WIN32>(&ov_pLockedRect);
spv_pLockedRect = (opv_pLockedRect == 0 ) ? 0: &sv_pLockedRect;
sv_pLockedRect.Pitch = ov_pLockedRect.Pitch;
sv_pLockedRect.pBits = (void *) pointer(ov_pLockedRect.pBits);

PIXPointer opv_pRect;
 RECT ov_pRect;
 RECT* spv_pRect;
 RECT sv_pRect;
reader.readParameter<PIXPointer>(&opv_pRect);
reader.readParameter< RECT>(&ov_pRect);
spv_pRect = (opv_pRect == 0 ) ? 0: &sv_pRect;
sv_pRect = ov_pRect;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LockRect(
sv_FaceType ,sv_Level ,spv_pLockedRect ,spv_pRect ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_LOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

D3DCUBEMAP_FACES ov_FaceType;
D3DCUBEMAP_FACES sv_FaceType;
reader.readParameter<D3DCUBEMAP_FACES>(&ov_FaceType);
sv_FaceType = ov_FaceType;

UINT ov_Level;
UINT sv_Level;
reader.readParameter<UINT>(&ov_Level);
sv_Level = ov_Level;

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UnlockRect(
sv_FaceType ,sv_Level);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_UNLOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT() {

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DCubeTexture9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DCubeTexture9 *>(status.getSubstitute(oip_This));

D3DCUBEMAP_FACES ov_FaceType;
D3DCUBEMAP_FACES sv_FaceType;
reader.readParameter<D3DCUBEMAP_FACES>(&ov_FaceType);
sv_FaceType = ov_FaceType;

PIXPointer opv_pDirtyRect;
 RECT ov_pDirtyRect;
 RECT* spv_pDirtyRect;
 RECT sv_pDirtyRect;
reader.readParameter<PIXPointer>(&opv_pDirtyRect);
reader.readParameter< RECT>(&ov_pDirtyRect);
spv_pDirtyRect = (opv_pDirtyRect == 0 ) ? 0: &sv_pDirtyRect;
sv_pDirtyRect = ov_pDirtyRect;

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_USER_PRE
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddDirtyRect(
sv_FaceType ,spv_pDirtyRect);

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_USER_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DCUBETEXTURE9_ADDDIRTYRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

UINT ov_OffsetToLock;
UINT sv_OffsetToLock;
reader.readParameter<UINT>(&ov_OffsetToLock);
sv_OffsetToLock = ov_OffsetToLock;

UINT ov_SizeToLock;
UINT sv_SizeToLock;
reader.readParameter<UINT>(&ov_SizeToLock);
sv_SizeToLock = ov_SizeToLock;

PIXPointer ov_ppbData;
void** sv_ppbData;
reader.readParameter<PIXPointer>(&ov_ppbData);
sv_ppbData = (void**) pointer(ov_ppbData);

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Lock(
sv_OffsetToLock ,sv_SizeToLock ,sv_ppbData ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVERTEXBUFFER9_LOCK didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVertexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVertexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Unlock(
);

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVERTEXBUFFER9_UNLOCK didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC() {

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_USER_PRE
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_USER_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DVERTEXBUFFER9_GETDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DINDEXBUFFER9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

UINT ov_OffsetToLock;
UINT sv_OffsetToLock;
reader.readParameter<UINT>(&ov_OffsetToLock);
sv_OffsetToLock = ov_OffsetToLock;

UINT ov_SizeToLock;
UINT sv_SizeToLock;
reader.readParameter<UINT>(&ov_SizeToLock);
sv_SizeToLock = ov_SizeToLock;

PIXPointer ov_ppbData;
void** sv_ppbData;
reader.readParameter<PIXPointer>(&ov_ppbData);
sv_ppbData = (void**) pointer(ov_ppbData);

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Lock(
sv_OffsetToLock ,sv_SizeToLock ,sv_ppbData ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DINDEXBUFFER9_LOCK didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DIndexBuffer9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DIndexBuffer9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Unlock(
);

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DINDEXBUFFER9_UNLOCK didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC() {

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_USER_PRE
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_USER_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DINDEXBUFFER9_GETDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSURFACE9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DSURFACE9_ADDREF_USER_POST
D3D9OP_IDIRECT3DSURFACE9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASE_USER_POST
D3D9OP_IDIRECT3DSURFACE9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSURFACE9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer ov_Return;
DWORD sv_Return;
reader.readParameter<PIXPointer>(&ov_Return);
sv_Return = (DWORD) pointer(ov_Return);

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

PIXPointer ov_PriorityNew;
DWORD sv_PriorityNew;
reader.readParameter<PIXPointer>(&ov_PriorityNew);
sv_PriorityNew = (DWORD) pointer(ov_PriorityNew);

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> SetPriority(
sv_PriorityNew);

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_USER_POST
D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_SETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETPRIORITY_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_PRELOAD() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_PRELOAD_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_PRELOAD", "Not supported D3D9 call found in trace file.");
#endif

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSURFACE9_PRELOAD_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_PRELOAD_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_PRELOAD_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_PRELOAD_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_PRELOAD interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_PRELOAD", "Calling to D3D9 interface with NULL pointer.");
}
else
    sip_This -> PreLoad(
);

#ifdef D3D9OP_IDIRECT3DSURFACE9_PRELOAD_USER_POST
D3D9OP_IDIRECT3DSURFACE9_PRELOAD_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_PRELOAD_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_PRELOAD_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

GUID ov_riid;
GUID sv_riid;
reader.readParameter<GUID>(&ov_riid);
sv_riid = ov_riid;

PIXPointer ov_ppContainer;
void** sv_ppContainer;
reader.readParameter<PIXPointer>(&ov_ppContainer);
sv_ppContainer = (void**) pointer(ov_ppContainer);

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetContainer(
sv_riid ,sv_ppContainer);

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSURFACE9_GETCONTAINER didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETDESC() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDESC_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDESC_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_LOCKRECT() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_LOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pLockedRect;
D3DLOCKED_RECT_COMP_WIN32 ov_pLockedRect;
D3DLOCKED_RECT* spv_pLockedRect;
D3DLOCKED_RECT sv_pLockedRect;
reader.readParameter<PIXPointer>(&opv_pLockedRect);
reader.readParameter<D3DLOCKED_RECT_COMP_WIN32>(&ov_pLockedRect);
spv_pLockedRect = (opv_pLockedRect == 0 ) ? 0: &sv_pLockedRect;
sv_pLockedRect.Pitch = ov_pLockedRect.Pitch;
sv_pLockedRect.pBits = (void *) pointer(ov_pLockedRect.pBits);

PIXPointer opv_pRect;
 RECT ov_pRect;
 RECT* spv_pRect;
 RECT sv_pRect;
reader.readParameter<PIXPointer>(&opv_pRect);
reader.readParameter< RECT>(&ov_pRect);
spv_pRect = (opv_pRect == 0 ) ? 0: &sv_pRect;
sv_pRect = ov_pRect;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_LOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_LOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LockRect(
spv_pLockedRect ,spv_pRect ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_USER_POST
D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_LOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSURFACE9_LOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DSurface9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DSurface9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UnlockRect(
);

#ifdef D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_USER_POST
D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DSURFACE9_UNLOCKRECT didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_GETDC() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_GETDC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDC_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDC_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_GETDC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDC_USER_POST
D3D9OP_IDIRECT3DSURFACE9_GETDC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_GETDC_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_GETDC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DSURFACE9_RELEASEDC() {

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DSURFACE9_RELEASEDC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_SPECIFIC_PRE
D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_USER_PRE
D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_USER_POST
D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_SPECIFIC_POST
D3D9OP_IDIRECT3DSURFACE9_RELEASEDC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUME9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_ADDREF_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_ADDREF interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_ADDREF", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> AddRef(
);

#ifdef D3D9OP_IDIRECT3DVOLUME9_ADDREF_USER_POST
D3D9OP_IDIRECT3DVOLUME9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

ULONG ov_Return;
ULONG sv_Return;
reader.readParameter<ULONG>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUME9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_RELEASE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_RELEASE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_RELEASE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> Release(
);

#ifdef D3D9OP_IDIRECT3DVOLUME9_RELEASE_USER_POST
D3D9OP_IDIRECT3DVOLUME9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_RELEASE_SPECIFIC_POST
#endif

if (sv_Return == 0)
    status.removeSubstitute(oip_This);
}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

PIXPointer opip_ppDevice;
PIXPointer oip_ppDevice;
IDirect3DDevice9** spip_ppDevice;
IDirect3DDevice9* sip_ppDevice;
reader.readParameter<PIXPointer>(&opip_ppDevice);
reader.readParameter<PIXPointer>(&oip_ppDevice);
spip_ppDevice = &sip_ppDevice;

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_GETDEVICE interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETDEVICE", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetDevice(
spip_ppDevice);

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_GETDEVICE_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUME9_GETDEVICE didn't return OK.\n");

if (sv_Return == D3D_OK)
    status.setSubstitute(oip_ppDevice, sip_ppDevice);

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_SETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_GETPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_USER_POST
D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_FREEPRIVATEDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

GUID ov_riid;
GUID sv_riid;
reader.readParameter<GUID>(&ov_riid);
sv_riid = ov_riid;

PIXPointer ov_ppContainer;
void** sv_ppContainer;
reader.readParameter<PIXPointer>(&ov_ppContainer);
sv_ppContainer = (void**) pointer(ov_ppContainer);

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> GetContainer(
sv_riid ,sv_ppContainer);

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_USER_POST
D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUME9_GETCONTAINER didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_GETDESC() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDESC_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_GETDESC", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDESC_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_GETDESC_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDESC_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_GETDESC_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDESC_USER_POST
D3D9OP_IDIRECT3DVOLUME9_GETDESC_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_GETDESC_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_GETDESC_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_LOCKBOX() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_LOCKBOX", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

PIXPointer opv_pLockedVolume;
D3DLOCKED_BOX_COMP_WIN32 ov_pLockedVolume;
D3DLOCKED_BOX * spv_pLockedVolume;
D3DLOCKED_BOX  sv_pLockedVolume;
reader.readParameter<PIXPointer>(&opv_pLockedVolume);
reader.readParameter<D3DLOCKED_BOX_COMP_WIN32>(&ov_pLockedVolume);
spv_pLockedVolume = (opv_pLockedVolume == 0 ) ? 0: &sv_pLockedVolume;
sv_pLockedVolume.RowPitch = ov_pLockedVolume.RowPitch;
sv_pLockedVolume.SlicePitch = ov_pLockedVolume.SlicePitch;
sv_pLockedVolume.pBits = (void *) pointer(ov_pLockedVolume.pBits);

PIXPointer opv_pBox;
 D3DBOX ov_pBox;
 D3DBOX* spv_pBox;
 D3DBOX sv_pBox;
reader.readParameter<PIXPointer>(&opv_pBox);
reader.readParameter< D3DBOX>(&ov_pBox);
spv_pBox = (opv_pBox == 0 ) ? 0: &sv_pBox;
sv_pBox = ov_pBox;

PIXPointer ov_Flags;
DWORD sv_Flags;
reader.readParameter<PIXPointer>(&ov_Flags);
sv_Flags = (DWORD) pointer(ov_Flags);

#ifdef D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_LOCKBOX interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_LOCKBOX", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> LockBox(
spv_pLockedVolume ,spv_pBox ,sv_Flags);

#ifdef D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_USER_POST
D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_LOCKBOX_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUME9_LOCKBOX didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX() {

#ifdef D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX", "Not supported D3D9 call found in trace file.");
#endif

HRESULT ov_Return;
HRESULT sv_Return;
reader.readParameter<HRESULT>(&ov_Return);
sv_Return = ov_Return;

PIXPointer oip_This;
IDirect3DVolume9 * sip_This;
reader.readParameter<PIXPointer>(&oip_This);
sip_This = static_cast<IDirect3DVolume9 *>(status.getSubstitute(oip_This));

#ifdef D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_SPECIFIC_PRE
D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_USER_PRE
D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_USER_PRE
#endif

if (sip_This == NULL)
{
    includelog::logfile().write(includelog::Panic, "Ignoring call to NULL interface pointer for D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX interface call.\n");
    if (!status.isEnabledContinueOnNULLHack())
        panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX", "Calling to D3D9 interface with NULL pointer.");
    sv_Return = -1;
}
else
    sv_Return = sip_This -> UnlockBox(
);

#ifdef D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_USER_POST
D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_SPECIFIC_POST
D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX_SPECIFIC_POST
#endif

if (sv_Return != D3D_OK)
    includelog::logfile().write(includelog::Panic, "Call to D3D9OP_IDIRECT3DVOLUME9_UNLOCKBOX didn't return OK.\n");

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_USER_POST
D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_QUERYINTERFACE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_ADDREF() {

#ifdef D3D9OP_IDIRECT3DQUERY9_ADDREF_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_ADDREF", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ADDREF_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_ADDREF_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ADDREF_USER_PRE
D3D9OP_IDIRECT3DQUERY9_ADDREF_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ADDREF_USER_POST
D3D9OP_IDIRECT3DQUERY9_ADDREF_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ADDREF_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_ADDREF_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_RELEASE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_RELEASE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_RELEASE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_RELEASE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_RELEASE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_RELEASE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_RELEASE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_RELEASE_USER_POST
D3D9OP_IDIRECT3DQUERY9_RELEASE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_RELEASE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_RELEASE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_GETDEVICE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDEVICE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_GETDEVICE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDEVICE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_GETDEVICE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDEVICE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_GETDEVICE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDEVICE_USER_POST
D3D9OP_IDIRECT3DQUERY9_GETDEVICE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDEVICE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_GETDEVICE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_GETTYPE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_GETTYPE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_GETTYPE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETTYPE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_GETTYPE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETTYPE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_GETTYPE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETTYPE_USER_POST
D3D9OP_IDIRECT3DQUERY9_GETTYPE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETTYPE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_GETTYPE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_GETDATASIZE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_GETDATASIZE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_USER_POST
D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_GETDATASIZE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_ISSUE() {

#ifdef D3D9OP_IDIRECT3DQUERY9_ISSUE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_ISSUE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ISSUE_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_ISSUE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ISSUE_USER_PRE
D3D9OP_IDIRECT3DQUERY9_ISSUE_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ISSUE_USER_POST
D3D9OP_IDIRECT3DQUERY9_ISSUE_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_ISSUE_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_ISSUE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_IDIRECT3DQUERY9_GETDATA() {

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATA_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_IDIRECT3DQUERY9_GETDATA", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATA_SPECIFIC_PRE
D3D9OP_IDIRECT3DQUERY9_GETDATA_SPECIFIC_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATA_USER_PRE
D3D9OP_IDIRECT3DQUERY9_GETDATA_USER_PRE
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATA_USER_POST
D3D9OP_IDIRECT3DQUERY9_GETDATA_USER_POST
#endif

#ifdef D3D9OP_IDIRECT3DQUERY9_GETDATA_SPECIFIC_POST
D3D9OP_IDIRECT3DQUERY9_GETDATA_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_DIRECT3DCREATE9() {

#ifdef D3D9OP_DIRECT3DCREATE9_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_DIRECT3DCREATE9", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_DIRECT3DCREATE9_SPECIFIC_PRE
D3D9OP_DIRECT3DCREATE9_SPECIFIC_PRE
#endif

#ifdef D3D9OP_DIRECT3DCREATE9_USER_PRE
D3D9OP_DIRECT3DCREATE9_USER_PRE
#endif

#ifdef D3D9OP_DIRECT3DCREATE9_USER_POST
D3D9OP_DIRECT3DCREATE9_USER_POST
#endif

#ifdef D3D9OP_DIRECT3DCREATE9_SPECIFIC_POST
D3D9OP_DIRECT3DCREATE9_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_DEBUGSETMUTE() {

#ifdef D3D9OP_DEBUGSETMUTE_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_DEBUGSETMUTE", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_DEBUGSETMUTE_SPECIFIC_PRE
D3D9OP_DEBUGSETMUTE_SPECIFIC_PRE
#endif

#ifdef D3D9OP_DEBUGSETMUTE_USER_PRE
D3D9OP_DEBUGSETMUTE_USER_PRE
#endif

#ifdef D3D9OP_DEBUGSETMUTE_USER_POST
D3D9OP_DEBUGSETMUTE_USER_POST
#endif

#ifdef D3D9OP_DEBUGSETMUTE_SPECIFIC_POST
D3D9OP_DEBUGSETMUTE_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_UNUSED_208() {

#ifdef D3D9OP_UNUSED_208_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_UNUSED_208", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_UNUSED_208_SPECIFIC_PRE
D3D9OP_UNUSED_208_SPECIFIC_PRE
#endif

#ifdef D3D9OP_UNUSED_208_USER_PRE
D3D9OP_UNUSED_208_USER_PRE
#endif

#ifdef D3D9OP_UNUSED_208_USER_POST
D3D9OP_UNUSED_208_USER_POST
#endif

#ifdef D3D9OP_UNUSED_208_SPECIFIC_POST
D3D9OP_UNUSED_208_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_DIRECT3DSHADERVALIDATORCREATE9() {

#ifdef D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_DIRECT3DSHADERVALIDATORCREATE9", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_SPECIFIC_PRE
D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_SPECIFIC_PRE
#endif

#ifdef D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_USER_PRE
D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_USER_PRE
#endif

#ifdef D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_USER_POST
D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_USER_POST
#endif

#ifdef D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_SPECIFIC_POST
D3D9OP_DIRECT3DSHADERVALIDATORCREATE9_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_UNUSED_210() {

#ifdef D3D9OP_UNUSED_210_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_UNUSED_210", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_UNUSED_210_SPECIFIC_PRE
D3D9OP_UNUSED_210_SPECIFIC_PRE
#endif

#ifdef D3D9OP_UNUSED_210_USER_PRE
D3D9OP_UNUSED_210_USER_PRE
#endif

#ifdef D3D9OP_UNUSED_210_USER_POST
D3D9OP_UNUSED_210_USER_POST
#endif

#ifdef D3D9OP_UNUSED_210_SPECIFIC_POST
D3D9OP_UNUSED_210_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_UNUSED_211() {

#ifdef D3D9OP_UNUSED_211_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_UNUSED_211", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_UNUSED_211_SPECIFIC_PRE
D3D9OP_UNUSED_211_SPECIFIC_PRE
#endif

#ifdef D3D9OP_UNUSED_211_USER_PRE
D3D9OP_UNUSED_211_USER_PRE
#endif

#ifdef D3D9OP_UNUSED_211_USER_POST
D3D9OP_UNUSED_211_USER_POST
#endif

#ifdef D3D9OP_UNUSED_211_SPECIFIC_POST
D3D9OP_UNUSED_211_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_BEGINEVENT() {

#ifdef D3D9OP_D3DPERF_BEGINEVENT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_BEGINEVENT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_BEGINEVENT_SPECIFIC_PRE
D3D9OP_D3DPERF_BEGINEVENT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_BEGINEVENT_USER_PRE
D3D9OP_D3DPERF_BEGINEVENT_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_BEGINEVENT_USER_POST
D3D9OP_D3DPERF_BEGINEVENT_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_BEGINEVENT_SPECIFIC_POST
D3D9OP_D3DPERF_BEGINEVENT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_ENDEVENT() {

#ifdef D3D9OP_D3DPERF_ENDEVENT_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_ENDEVENT", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_ENDEVENT_SPECIFIC_PRE
D3D9OP_D3DPERF_ENDEVENT_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_ENDEVENT_USER_PRE
D3D9OP_D3DPERF_ENDEVENT_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_ENDEVENT_USER_POST
D3D9OP_D3DPERF_ENDEVENT_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_ENDEVENT_SPECIFIC_POST
D3D9OP_D3DPERF_ENDEVENT_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_SETMARKER() {

#ifdef D3D9OP_D3DPERF_SETMARKER_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_SETMARKER", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_SETMARKER_SPECIFIC_PRE
D3D9OP_D3DPERF_SETMARKER_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETMARKER_USER_PRE
D3D9OP_D3DPERF_SETMARKER_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETMARKER_USER_POST
D3D9OP_D3DPERF_SETMARKER_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_SETMARKER_SPECIFIC_POST
D3D9OP_D3DPERF_SETMARKER_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_SETREGION() {

#ifdef D3D9OP_D3DPERF_SETREGION_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_SETREGION", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_SETREGION_SPECIFIC_PRE
D3D9OP_D3DPERF_SETREGION_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETREGION_USER_PRE
D3D9OP_D3DPERF_SETREGION_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETREGION_USER_POST
D3D9OP_D3DPERF_SETREGION_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_SETREGION_SPECIFIC_POST
D3D9OP_D3DPERF_SETREGION_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_QUERYREPEATFRAME() {

#ifdef D3D9OP_D3DPERF_QUERYREPEATFRAME_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_QUERYREPEATFRAME", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_QUERYREPEATFRAME_SPECIFIC_PRE
D3D9OP_D3DPERF_QUERYREPEATFRAME_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_QUERYREPEATFRAME_USER_PRE
D3D9OP_D3DPERF_QUERYREPEATFRAME_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_QUERYREPEATFRAME_USER_POST
D3D9OP_D3DPERF_QUERYREPEATFRAME_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_QUERYREPEATFRAME_SPECIFIC_POST
D3D9OP_D3DPERF_QUERYREPEATFRAME_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_SETOPTIONS() {

#ifdef D3D9OP_D3DPERF_SETOPTIONS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_SETOPTIONS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_SETOPTIONS_SPECIFIC_PRE
D3D9OP_D3DPERF_SETOPTIONS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETOPTIONS_USER_PRE
D3D9OP_D3DPERF_SETOPTIONS_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_SETOPTIONS_USER_POST
D3D9OP_D3DPERF_SETOPTIONS_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_SETOPTIONS_SPECIFIC_POST
D3D9OP_D3DPERF_SETOPTIONS_SPECIFIC_POST
#endif

}

void D3D9PixRunPlayer::D3D9OP_D3DPERF_GETSTATUS() {

#ifdef D3D9OP_D3DPERF_GETSTATUS_PANIC
panic("D3D9PixRunPlayer", "D3D9OP_D3DPERF_GETSTATUS", "Not supported D3D9 call found in trace file.");
#endif

#ifdef D3D9OP_D3DPERF_GETSTATUS_SPECIFIC_PRE
D3D9OP_D3DPERF_GETSTATUS_SPECIFIC_PRE
#endif

#ifdef D3D9OP_D3DPERF_GETSTATUS_USER_PRE
D3D9OP_D3DPERF_GETSTATUS_USER_PRE
#endif

#ifdef D3D9OP_D3DPERF_GETSTATUS_USER_POST
D3D9OP_D3DPERF_GETSTATUS_USER_POST
#endif

#ifdef D3D9OP_D3DPERF_GETSTATUS_SPECIFIC_POST
D3D9OP_D3DPERF_GETSTATUS_SPECIFIC_POST
#endif

}

